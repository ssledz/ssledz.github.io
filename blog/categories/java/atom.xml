<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2016-05-21T14:27:22+02:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hot Swap in Java With DCEVM and HotSwapAgent - a JRebel Free Alternative]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative/"/>
    <updated>2016-05-16T22:38:40+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative</id>
    <content type="html"><![CDATA[<p>Reloading a bytecode in a virtual machine when application is running is very limited. In fact 
HotSpot(TM) VM allows only changing method bodies. To address this problem some commercial and open source tools were 
created. Among them is <em>Dynamic Code Evolution Virtual Machine</em> (<strong>DCEVM</strong>) and 
<strong>HotSwapAgent</strong> - very promising open source tool.</p>

<p>I have already some experience in using <strong>DCEVM</strong>. Some times ago I have been working for an insurance company where 
I was using this modified vm to develop a code in a gosu language. <a href="https://gosu-lang.github.io/">Gosu</a> is another 
JVM language. I remember that then hot swapping worked very well.</p>

<p>Let’s try this tool. First we need to patch our current jvm.</p>

<h3 id="installing-dynamic-code-evolution-vm">Installing Dynamic Code Evolution VM</h3>

<p>In order to enhance current Java (JRE/JDK) installations with <strong>DCEVM</strong>
you need to download the latest <a href="https://dcevm.github.io/">release</a> 
of <strong>DCEVM</strong> installer for a given major java version,</p>

<blockquote>
  <p><code>java 7</code> and <code>java 8</code> are supported</p>
</blockquote>

<p>run the installer</p>

<p><code>
java -jar DCEVM-light-8u74-installer.jar
</code></p>

<p>then select a proper java installation directory on your disc and press <em>Install DCEVM as altjvm</em></p>

<p><img class="center" src="/images/custom/dcevm-installer.png"></p>

<p>That’s all really. Very simple isn’t it ?</p>

<p>To validate the installation run:</p>

<p><code>
java -version
</code></p>

<p>and if everything went alright you should see something similar to below
output:</p>

<p><code>
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Dynamic Code Evolution 64-Bit Server VM (build 25.71-b01-dcevmlight-10, mixed mode)
</code></p>

<p>Note that in the third line instead of <code>Java HotSpot(TM)</code> we have 
now <code>Dynamic Code Evolution</code>.</p>

<h4 id="kind-of-installers">Kind of installers</h4>
<p>Worth noting is the fact that there are two kind of installers</p>

<ul>
  <li><em>light</em></li>
  <li>and <em>full</em></li>
</ul>

<p>The latter one supports more features (for example, it supports removal of superclasses),
but because of the maintenance issues the <em>full</em> edition is available 
for a fewer versions of jdk.</p>

<h3 id="downloading-hotswapagent">Downloading HotswapAgent</h3>

<p>HotswapAgent does the work of reloading resources and framework configuration. 
So in order to have a support for reloading a spring bean definitions just 
after a change occurs, we need to perform one more step - 
download latest release of <a href="https://github.com/HotswapProjects/HotswapAgent/releases">hotswap-agent.jar</a>
and put it anywhere. For example here: <code>~/bin/hotswap/hotswap-agent.jar</code>.</p>

<h2 id="running-application-in-order-to-test-hot-swapping">Running application in order to test hot swapping</h2>

<p>I will use <code>Main</code> and <code>Main2</code> classes to play with hot swapping:</p>

<p>```java
public class Main {</p>

<pre><code>static class Foo {
    int counter;

    void foo() {
        System.out.printf("foo - %08d", counter);
        counter++;
    }
}

static Foo foo = new Foo();

static int counter = 0;

static void mainLoop() {
    System.out.printf("tick - %08d\t", counter++);
    foo.foo();
    System.out.println();
}

public static void main(String[] args) throws InterruptedException {
    while (true) {
        mainLoop();
        Thread.sleep(2000);
    }
} } ```
</code></pre>

<p>And the second one:</p>

<p>```java
public class Main2 {</p>

<pre><code>static class Foo {

}

static void mainLoop() {

    String fields = Stream.of(Foo.class.getFields())
            .map(f -&gt; f.getName())
            .collect(Collectors.joining(",", "[", "]"));
    String methods = Stream.of(Foo.class.getDeclaredMethods())
            .map(m -&gt; m.getName())
            .collect(Collectors.joining(",", "[", "]"));

    System.out.printf("fields=%s\t methods=%s\n", fields, methods);

}

public static void main(String[] args) throws InterruptedException {
    while (true) {
        mainLoop();
        Thread.sleep(2000);
    }
} } ```
</code></pre>

<p>I will test following use cases:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">case</th>
      <th style="text-align: center">works ?</th>
      <th style="text-align: left">Test class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>1.</strong></td>
      <td style="text-align: left">change body method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>2.</strong></td>
      <td style="text-align: left">add method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>3.</strong></td>
      <td style="text-align: left">add field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>4.</strong></td>
      <td style="text-align: left">remove field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>5.</strong></td>
      <td style="text-align: left">remove method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
  </tbody>
</table>

<h3 id="intellij-idea-settings">Intellij IDEA settings</h3>

<p>All tests will be performed using Intellij IDEA. Ensure that following options are set</p>

<ul>
  <li>enable <a href="https://www.jetbrains.com/help/idea/2016.1/reloading-classes.html?origin=old_help">classes reloading</a></li>
</ul>

<p><img class="center" src="/images/custom/idea/dcevm-hotswap-settings.png"></p>

<ul>
  <li>pass <code>-XXaltjvm=dcevm</code> vm option to run/debug configuration</li>
</ul>

<p><img class="center" src="/images/custom/idea/dcevm-run-dbg-conf.png"></p>

<h3 id="case-1--change-body-method">Case 1 : change body method</h3>

<p>Run debug. In the console you should see following output:</p>

<p><code>
tick - 00000000	foo - 00000000
tick - 00000001	foo - 00000001
tick - 00000002	foo - 00000002
tick - 00000003	foo - 00000003
</code></p>

<p>Then change <code>counter++;</code> to <code>counter+=2;</code> in <code>Foo</code> class.</p>

<p>```java
static class Foo {
    int counter;</p>

<pre><code>void foo() {
    System.out.printf("foo - %08d", counter);
    counter+=2;
} } ```
</code></pre>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile and after few seconds you should spot that the classes were reloaded successfully</p>

<p><code>
tick - 00000004	foo - 00000004
tick - 00000005	foo - 00000006
tick - 00000006	foo - 00000008
</code></p>

<h3 id="case-2--add-method">Case 2 : add method</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add method</p>

<p><code>java
void bar() {
    System.out.printf("\tbar - %08d", counter);
}
</code></p>

<p>to the <code>Foo</code> class and call it from the <code>mainLoop</code></p>

<p><code>java
static void mainLoop() {
    System.out.printf("tick - %08d\t", counter++);
    foo.foo();
    foo.bar();
    System.out.println();
}
</code></p>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile.</p>

<p><code>
tick - 00000003	foo - 00000003
tick - 00000004	foo - 00000004
tick - 00000005	foo - 00000005	bar - 00000006
tick - 00000006	foo - 00000006	bar - 00000007
tick - 00000007	foo - 00000007	bar - 00000008
</code></p>

<p>Classes were reloaded successfully.</p>

<h3 id="case-3--add-field">Case 3 : add field</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add field <code>int counter2</code> to <code>Foo</code> class and append following
two statements to the end of <code>foo</code> method.</p>

<p><code>java
System.out.printf("\tcounter2 - %08d", counter2);
counter2++;
</code></p>

<p><code>Foo</code> class should look following</p>

<p>```java
static class Foo {
    int counter;</p>

<pre><code>int counter2;

void foo() {
    System.out.printf("foo - %08d", counter);
    counter++;
    System.out.printf("\tcounter2 - %08d", counter2);
    counter2++;
} } ```
</code></pre>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile. And appears</p>

<p><code>
tick - 00000002	foo - 00000002
tick - 00000003	foo - 00000003
tick - 00000004	foo - 00000004	counter2 - 00000000
tick - 00000005	foo - 00000005	counter2 - 00000001
tick - 00000006	foo - 00000006	counter2 - 00000002
</code></p>

<p>that this kind of change was also reloaded successfully.</p>

<h3 id="case-4--remove-field">Case 4 : remove field</h3>

<p>Run debug. In the console you should see following output:</p>

<p><code>
fields=[]	 methods=[]
fields=[]	 methods=[]
fields=[]	 methods=[]
</code></p>

<p>Then add two public fields <code>int number</code> and <code>String name</code> to the <code>Foo</code> class.</p>

<p><code>java
static class Foo {
    public int number;
    public String name;
}
</code></p>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<p><code>
fields=[]	 methods=[]
fields=[number,name]	 methods=[]
fields=[number,name]	 methods=[]
</code></p>

<p>Then remove <code>number</code> field and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<p><code>
fields=[number,name]	 methods=[]
fields=[name]	 methods=[]
fields=[name]	 methods=[]
</code></p>

<p>The change was reloaded.</p>

<h3 id="case-5--remove-method">Case 5 : remove method</h3>

<p>Revert all changes in <code>Main2</code> class and run debug. Add</p>

<ul>
  <li>public field <code>String name</code></li>
  <li>public method <code>String getName()</code></li>
</ul>

<p>to the <code>Foo</code> class. Then hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<p><code>
fields=[]	 methods=[]
fields=[name]	 methods=[getName]
fields=[name]	 methods=[getName]
</code></p>

<p>Then remove <code>getName()</code> method and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<p><code>
fields=[name]	 methods=[getName]
fields=[name]	 methods=[]
fields=[name]	 methods=[]
</code></p>

<p>Seems that this change was also reloaded successfully.</p>

<h2 id="notes">Notes</h2>

<p>During the play with hot swapping in Intellij IDEA you could notice that for some circumstances code would not be 
reloaded. Intellij IDEA has a following limitation about which you need to be aware:</p>

<blockquote>
  <p>the old code is still used until the VM exits the obsolete stack frame</p>
</blockquote>

<p>About that you can read <a href="http://stackoverflow
.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">here</a></p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://dcevm.github.io/">DCEVM</a></li>
  <li><a href="http://www.hotswapagent.org/quick-start">HotswapAgent Quick start</a></li>
  <li><a href="https://github.com/HotswapProjects">HotswapProjects</a></li>
  <li><a href="http://stackoverflow.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">Hotswap/DCEVM doesn’t work in Intellij IDEA (Community Version)</a></li>
  <li><a href="https://wiki.wocommunity.org/display/WOL/Using+DCEVM+and+Hotswap+for+rapid+turnaround">Using DCEVM and Hotswap for rapid turnaround</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Professional, Java SE 8 Programmer 1Z0-809 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review/"/>
    <updated>2016-05-15T19:34:09+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review</id>
    <content type="html"><![CDATA[<p>Just after passing <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
(about that you can read <a href="/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">here</a>) 
and being impressed by <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>,
I decided to buy the newly released <a href="https://www.goodreads.com/book/show/23650477-ocp">OCP: Oracle Certified Professional Java Se 8 Programmer II Study Guide: Exam 1Z0-809</a>.
It was a really good purchase.</p>

<p>The book is awesome. It has a similar style and feel as the <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It covers many new features, in details, introduced in <code>java 8</code>.
I learn a lot about <code>lambda</code>, <code>collection streams</code>, <code>date api</code> 
and so on. I can tell you that this book was worth its money.</p>

<p>It took me almost 4 months to go through this book. To be honest I read
it two times. Same as previously (<a href="/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">OCA - review</a>) 
I was generally reading the book during my way to work. 
First time I really haven’t paid attention on solving tests. 
I have just gone through the book to better know
<code>java 8</code>. After that I took a few weeks break. When I started solving
test questions I noticed that I had a problem with <code>java API</code>. It is
really annoying that the test exam requires from developer to remember
api. In 2016 we have <code>ides</code>, written mainly for this purpose. Due this
fact I started reading a book again. This time however, 
I have been solving test question just after I read a chapter.</p>

<p>In order to prepare to the final exam I used <a href="https://sybextestbanks.wiley.com/public/">sybex</a>
platform. Due the fact that I bought the book I got an access to this
site where I found 411 test questions divided into 3 sets:</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (211) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test</li>
</ul>

<p>Moreover I had an access to the following resources:</p>

<ul>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - instant access to the key terms you’ll need to know for the exam</li>
  <li>Bonus Appendix - provides additional information about JavaScript with Nashorn, and 
enables you to test your knowledge and understanding of this topic.</li>
</ul>

<p>The exam lasted 150 minutes. At the end of the exam I still haven’t 
answered on the two questions. I can say that the exam was much more 
difficult than the <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>.</p>

<p>After receiving the email that my exam results were available I browsed to 
the <strong>CertView</strong> and it appeared that I scored <code>83%</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Associate Java SE 8 Programmer 1Z0-808 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/"/>
    <updated>2016-05-15T12:01:32+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review</id>
    <content type="html"><![CDATA[<p>After successfully passed <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
I would like to share my thoughts about the preparation and the exam.</p>

<p>I passed the exam and earn the 
<a href="https://www.youracclaim.com/badges/58fa8011-f1da-4a68-846c-b869ee04012b/public_url">badge</a> 
on Dec 2015 - so almost half year ago (since writing this post). 
Before preparation I was playing already with <code>java 8</code> a little. 
I have written two, maybe three applications which were using some 
new hot features like <code>lambda</code>, <code>default methods</code> and <code>streams</code>.
The whole knowledge how to do this I got mainly from oracle 
tutorials like</p>

<ul>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html">Aggregate Operations</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">Default Methods</a></li>
</ul>

<p>In spite of my experience as a java programmer I decided to spend some 
time to learn more about <code>java 8</code> to ensure that I would really pass the exam.</p>

<p>My journey I have started with the book: <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It took me some time, I think one month, to go through all chapters.
The book I was mainly reading during my way to work in metro, bus or tram.
I can say that I was enjoying reading it though I have already known 
most of the knowledge. It is written with a very simple language. I can say
that this book could be understandable by peoples who speak english in an 
intermediate level. It covers all the topics which can appear on 
an exam. After finishing it I bought the voucher on an exam, taking place 
a week later. I had one whole week to play around <code>java 8</code>, make some
tests and review things read in a book. To practice tests I used 
<a href="https://sybextestbanks.wiley.com/public/">sybex</a> platform. In order to 
get an access to this platform you only need to own a book.</p>

<p>On a site you can find 345 test questions divided into 3 sets</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (145) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test
Platform also provides an access to 2 other study tools</li>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - an instant access to the key terms you’ll need to know for the exam</li>
</ul>

<p>The day before the exam I decided to go sleep early. 
The exam lasted 150 minutes, and I had enough time to
answer on all the questions. They weren’t difficult. I can say
that the questions in a mockup exam from sybex were much harder. For example
if the question was a multiple choice question, in a real exam 
I was informed how many answers I needed to choose, 
in a mockup exam I weren’t.</p>

<p>One hour after the exam I received an email that my exam results were available. 
My score was <code>97%</code>. Regarding the response from <code>Oracle</code> 
I made mistakes in a questions from the following exam objectives:</p>

<ul>
  <li>Define the scope of variables</li>
  <li>Manipulate data using the StringBuilder class and methods</li>
</ul>

<p>It could sound strange that the experienced java developer made 
mistakes from the such basic topics. But believe me that the real 
intention of authors of the test is to trick you in an unexpected way. 
The question could seem to be about let’s say lambda syntax, but in real
it tests your knowledge about variable scoping. During taking tests you 
need to be very careful and stay focused all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Free Grammar Will Help Where Regex Pattern Fail - Is This Well Formed Array ?]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array/"/>
    <updated>2015-08-17T00:04:55+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Some times ago I was scanning Stackoverflow to find a puzzle to solve, and I found one guy was trying to write a piece of software which had needed to answer on one simple question. Is given expression a <strong>well formed array</strong>? He was searching for a ready to use regular expression but he failed, because this puzzle can’t be solved using regex engine. Why, I will explain later but now I can say that this puzzle can be easily solved using <strong>Context free grammar</strong>.</p>

<h3 id="well-formed-array">Well formed array</h3>
<p>You can ask what does the <strong>well formed array</strong> mean ? I will try to answer by providing some positive and negative examples of such arrays.
<code>
[1 2 [-34 7] 34]
[1 2 [-34] [7] 34]
[1 2 [-34 [7] 34]]
[1 2[-34[7]34]]
[]
[[[]]]
</code>
Above are well formed arrays. In opposite below are expressions which are not syntactically consistent with the definition of well formed array.
<code>
[1 2 -34 7] 34]
[1 2 [-34 [7] 34]
[][]
</code>
Studying those examples we can try to answer on this question. So well formed array is an expression which fulfills following requirements</p>

<ul>
  <li>first, no blank, character is an open brace <code>'['</code></li>
  <li>the last no blank character needs to be a closed brace</li>
  <li>inside array, integers and other well formed arrays can appear</li>
  <li>integers are separated with at least one blank character</li>
</ul>

<h3 id="why-not-regex-">Why not regex ?</h3>
<p>Let’s simplified our example. Let’s say that we want to write a regular expression which will generate following words <script type="math/tex">w=( [^n\quad ]^n\quad|\quad n >= 1 )</script>
<code>
[]
[[]]
[[]]
[[[]]]
</code>
You can notice that the mention above strings are a subset of the set of strings which we want to parse. And here I don’t have also good news. We can’t use regex engine to parse such strings.
Why is it not possible ? Simply speaking regex engine modeled by a <strong>Finite Automata (FA)</strong> can’t count how many <code>'['</code> we have already used and check that the same number of <code>']'</code> must appear just after the last <code>'['</code>. <strong>FA</strong> doesn’t have stack to remember such things. If You are curious about formal proof you can try to google <strong>Pumping Lemma</strong> phrase. <strong>Pumping Lemma</strong> provides You a useful tool to proof if a given language (set of words which fulfill given conditions) is not a regular.</p>

<h3 id="context-free-grammar">Context free grammar</h3>
<p>I have already mentioned that to solve our problem (if a given array is well formed) we need to write a parser of some <strong>context free grammar</strong>. The model of <strong>Context free grammar</strong> is a <strong>Finite Automata</strong> with a <strong>stack</strong>. Thanks to this an Automat is able to remember some facts that have happened (e.g count braces). To write a parser we need first to write down a grammar for expression of <strong>well formed array</strong>. To do this I will use <strong>ebnf</strong> (Extended Backus–Naur Form) form.
<code>
array = "[", { array-body }, "]" 
array-body = number | array
number = [ "-" ], digit, { digit }
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
</code>
Now we are ready to write a parser.  To be precise I will use top-down parsing strategy which let me directly transform written above grammar into set of recursively called procedures.</p>

<h3 id="parser">Parser</h3>

<p>It is a good manner to split parser into 2 parts</p>

<ul>
  <li>lexer</li>
  <li>parser</li>
</ul>

<p>Lexer is responsible for grouping letters into tokens. In our grammar we have 4 kinds of tokens</p>

<ul>
  <li><code>'['</code> (<strong>LB</strong>)</li>
  <li><code>']'</code> (<strong>RB</strong>)</li>
  <li>number (<strong>NUMBER</strong>)</li>
  <li>end - token informing that there is no letter left on input  (<strong>END</strong>)</li>
</ul>

<p>Tokens are expressed by a class <code>Token</code> written below</p>

<p>```java
public class Token {</p>

<pre><code>public enum Type {
    LB, RB, NUMBER, END
}

private final Type type;
private final String value;

public Token(Type type, String value) {
    this.type = type;
    this.value = value;
}

public Type getType() {
    return type;
}

public String getValue() {
    return value;
}

@Override
public String toString() {
    final StringBuilder sb = new StringBuilder("Token[");
    sb.append("type=").append(type);
    sb.append(", value='").append(value).append('\'');
    sb.append(']');
    return sb.toString();
} } ```
</code></pre>

<h4 id="lexer">Lexer</h4>

<p>```java
public class Lexer {</p>

<pre><code>private int current;
private String input;

public Lexer(String input) {
    this.input = input;
}

private char getChar() {
    return input.charAt(current++);
}

private void unputChar() {
    current--;
}

private boolean hasNextChar() {
    return current &lt; input.length();
}

public Token next() {

    if (!hasNextChar()) {
        return new Token(Type.END, "");
    }

    char c = getChar();

    while (Character.isWhitespace(c)) {
        c = getChar();
    }

    if (c == '[') {
        return new Token(Type.LB, "[");
    }

    if (c == ']') {
        return new Token(Type.RB, "]");
    }

    int s = 1;
    if (c == '-') {
        s = -1;
    } else {
        unputChar();
    }

    StringBuilder buffer = new StringBuilder();
    while (hasNextChar()) {

        c = getChar();

        if (Character.isDigit(c)) {
            buffer.append(c);
        } else {
            unputChar();
            break;
        }

    }

    return new Token(Type.NUMBER, s &gt; 0 ? buffer.toString() : "-" + buffer.toString());

} } ```
</code></pre>

<h4 id="parser-1">Parser</h4>

<p>```java
public class Parser {</p>

<pre><code>private Lexer lexer;
private Token currentToken;

private boolean match(Type type) {
    return type == currentToken.getType();
}

private void consume(Type type) {
    if (!match(type)) {
        throw new RuntimeException(String.format("Should be %s is %s", type.name(), currentToken.getType().name()));
    }
    currentToken = lexer.next();
}

private void array() {

    consume(Type.LB);

    while (true) {

        if (match(Type.NUMBER)) {
            consume(Type.NUMBER);
        } else if (match(Type.LB)) {
            array();
        } else {
            break;
        }

    }

    consume(Type.RB);
}


private void parse(String line) {

    lexer = new Lexer(line);
    currentToken = lexer.next();

    array();
    consume(Type.END);

}

public boolean isWellFormedArray(String line) {

    try {
        parse(line);
        return true;
    } catch (Exception e) {
        System.out.println(String.format("%s is not a proper array because %s", line, e.getMessage()));
        return false;
    }

}
</code></pre>

<p>}
<code>
</code>java
public class ParserTest {</p>

<pre><code>@Test
public void testIsWellFormedArray() throws Exception {

    Parser parser = new Parser();
    assertThat(parser.isWellFormedArray("[1 2 [-34 7] 34]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2 -34 7] 34]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[1 2 [-34] [7] 34]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2 [-34 [7] 34]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[1 2 [-34 [7] 34]]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[][]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[[]]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2[-34[7]34]]"), equalTo(true));

} } ```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Generate the Nth Fibonacci Number]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number/"/>
    <updated>2015-08-13T01:18:14+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Writing a method to generate the nth Fibonacci number is not a rocket science. The recursive formula for that is very simple and can be written following:
<code>
fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)
</code>
The n-th Fibonacci number is just the sum of two previous Fibonacci numbers and the first and second formula are our ‘base cases’. Based on this we can write a method <code>public static long slowFibonacci(int n)</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="err">```</span> <span class="n">You</span> <span class="n">have</span> <span class="n">already</span> <span class="n">noticed</span> <span class="n">that</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">writing</span> <span class="n">fibonacci</span> <span class="n">I</span> <span class="n">have</span> <span class="n">written</span> <span class="n">slowFibonacci</span><span class="o">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">a</span> <span class="n">reason</span> <span class="k">for</span> <span class="n">that</span> <span class="n">and</span> <span class="n">You</span> <span class="n">may</span> <span class="n">guessing</span> <span class="n">that</span> <span class="n">probably</span> <span class="n">we</span> <span class="n">can</span> <span class="k">do</span> <span class="n">something</span> <span class="n">with</span> <span class="k">this</span> <span class="n">method</span> <span class="n">to</span> <span class="n">make</span> <span class="n">it</span> <span class="n">much</span> <span class="n">faster</span> <span class="n">and</span> <span class="n">You</span> <span class="n">have</span> <span class="n">right</span><span class="o">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">a</span> <span class="n">quite</span> <span class="n">usful</span> <span class="n">programming</span> <span class="n">method</span> <span class="n">which</span> <span class="n">we</span> <span class="n">can</span> <span class="n">use</span> <span class="n">to</span> <span class="n">improve</span> <span class="n">the</span> <span class="n">performance</span> <span class="n">of</span> <span class="k">this</span> <span class="n">method</span><span class="o">.</span> <span class="n">However</span> <span class="n">before</span> <span class="n">doing</span> <span class="k">this</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">try</span> <span class="n">to</span> <span class="n">write</span> <span class="n">a</span> <span class="n">method</span> <span class="n">call</span> <span class="n">stack</span> <span class="n">trace</span> <span class="k">for</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">say</span> <span class="mi">5</span><span class="n">th</span> <span class="n">Fibonacci</span> <span class="n">number</span><span class="o">.</span> <span class="err">```</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">----</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">----</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">3</span> <span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span> <span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span> <span class="err">```</span> <span class="n">The</span> <span class="n">number</span> <span class="n">of</span> <span class="n">dashes</span> <span class="n">means</span> <span class="n">how</span> <span class="n">many</span> <span class="n">delayed</span> <span class="n">operations</span> <span class="n">is</span> <span class="n">on</span> <span class="n">the</span> <span class="n">stack</span><span class="o">.</span> <span class="n">Dash</span> <span class="n">followed</span> <span class="n">by</span> <span class="n">the</span> <span class="err">&#39;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="err">&#39;</span> <span class="o">(</span><span class="err">&#39;</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="err">&#39;</span><span class="o">)</span> <span class="n">means</span> <span class="n">that</span> <span class="n">the</span> <span class="n">operation</span> <span class="n">can</span> <span class="n">be</span> <span class="nf">computed</span> <span class="o">(</span><span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="n">provided</span><span class="o">)</span> <span class="n">and</span> <span class="n">removed</span> <span class="n">from</span> <span class="n">the</span> <span class="n">stack</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">notice</span> <span class="n">that</span> <span class="n">the</span> <span class="n">same</span> <span class="n">operations</span> <span class="n">are</span> <span class="n">evaluated</span> <span class="n">many</span> <span class="n">times</span><span class="o">,</span> <span class="k">for</span> <span class="n">example</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">computed</span> <span class="mi">3</span> <span class="n">times</span><span class="o">.</span> <span class="n">It</span> <span class="n">is</span> <span class="n">obvious</span> <span class="n">waste</span> <span class="n">of</span> <span class="n">cpu</span> <span class="n">resources</span><span class="o">.</span> <span class="n">What</span> <span class="n">can</span> <span class="n">we</span> <span class="k">do</span> <span class="n">to</span> <span class="n">use</span> <span class="n">previously</span> <span class="n">computed</span> <span class="n">value</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">evaluating</span> <span class="n">it</span> <span class="n">again</span> <span class="n">and</span> <span class="n">again</span> <span class="o">?&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;dynamic-programming&quot;</span><span class="o">&gt;</span><span class="n">Dynamic</span> <span class="n">programming</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">‘</span><span class="n">Dynamic</span> <span class="n">programming</span><span class="err">’</span> <span class="n">method</span> <span class="n">comes</span> <span class="n">to</span> <span class="n">our</span> <span class="n">rescue</span><span class="o">.</span> <span class="n">According</span> <span class="n">to</span> <span class="n">the</span> <span class="n">wiki</span><span class="o">,</span> <span class="err">‘</span><span class="n">dynamic</span> <span class="n">programming</span><span class="err">’</span> <span class="n">is</span> <span class="n">a</span> <span class="n">method</span> <span class="k">for</span> <span class="n">solving</span> <span class="n">a</span> <span class="n">complex</span> <span class="n">problem</span> <span class="n">by</span> <span class="n">breaking</span> <span class="n">it</span> <span class="n">down</span> <span class="n">into</span> <span class="n">a</span> <span class="n">collection</span> <span class="n">of</span> <span class="n">simpler</span> <span class="n">subproblems</span><span class="o">.</span> <span class="n">It</span> <span class="n">is</span> <span class="n">applicable</span> <span class="n">to</span> <span class="n">problems</span> <span class="n">exhibiting</span> <span class="n">the</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">overlapping</span> <span class="n">subproblems</span> <span class="n">and</span> <span class="n">optimal</span> <span class="n">substructure</span><span class="o">.</span> <span class="n">The</span> <span class="n">dynamic</span> <span class="n">programming</span> <span class="n">approach</span> <span class="n">seeks</span> <span class="n">to</span> <span class="n">solve</span> <span class="n">each</span> <span class="n">subproblem</span> <span class="n">only</span> <span class="n">once</span><span class="o">,</span> <span class="n">thus</span> <span class="n">reducing</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="nl">computations:</span> <span class="n">once</span> <span class="n">the</span> <span class="n">solution</span> <span class="n">to</span> <span class="n">a</span> <span class="n">given</span> <span class="n">subproblem</span> <span class="n">has</span> <span class="n">been</span> <span class="n">computed</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">stored</span> <span class="n">or</span> <span class="err">“</span><span class="n">memoized</span><span class="err">”</span><span class="o">:</span> <span class="n">the</span> <span class="n">next</span> <span class="n">time</span> <span class="n">the</span> <span class="n">same</span> <span class="n">solution</span> <span class="n">is</span> <span class="n">needed</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">simply</span> <span class="n">looked</span> <span class="n">up</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">What</span> <span class="n">does</span> <span class="n">it</span> <span class="n">mean</span> <span class="k">for</span> <span class="n">us</span> <span class="o">?</span> <span class="n">Each</span> <span class="n">already</span> <span class="n">solved</span> <span class="nf">subproblem</span> <span class="o">(</span><span class="n">computed</span> <span class="n">i</span><span class="o">-</span><span class="n">th</span> <span class="n">Fibonacci</span> <span class="n">number</span><span class="o">)</span> <span class="n">can</span> <span class="n">be</span> <span class="n">saved</span> <span class="n">in</span> <span class="n">the</span> <span class="n">let</span><span class="err">’</span><span class="n">s</span> <span class="n">say</span> <span class="n">global</span> <span class="n">array</span> <span class="n">and</span> <span class="k">if</span> <span class="n">the</span> <span class="n">same</span> <span class="n">solution</span> <span class="n">is</span> <span class="n">needed</span> <span class="n">just</span> <span class="n">simply</span> <span class="n">look</span> <span class="k">for</span> <span class="n">it</span> <span class="n">in</span> <span class="n">that</span> <span class="n">table</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;coding&quot;</span><span class="o">&gt;</span><span class="n">Coding</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="n">java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fibonacci</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span><span class="o">[]</span> <span class="n">FIB</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Call</span> <span class="n">stack</span> <span class="n">trace</span> <span class="k">for</span> <span class="k">this</span> <span class="n">tuned</span> <span class="n">method</span> <span class="n">is</span> <span class="n">following</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nf">fibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="err">–</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="err">—</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="err">—</span><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span>
</span><span class='line'><span class="err">—</span><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span>
</span><span class='line'><span class="err">—</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span>
</span><span class='line'><span class="err">—</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span>
</span><span class='line'><span class="err">–</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span>
</span><span class='line'><span class="err">–</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span>
</span><span class='line'><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">fibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>
You can notice that the number of calls is much smaller then for <code>slowFibonacci(5)</code>.</p>

<p>At the end I would like to present a simple benchmark
<code>
fibonacci(45) = 1134903170
Duration: 0,002000s
fibonacci(60) = 1548008755920
Duration: 0,000000s
slowFibonacci(45) = 1134903170
Duration: 7,893000s
</code>
To compute 45-th Fibonacci number for <code>fibonacci</code> it takes 2ms and for <code>slowFibonacci</code> it takes 7.8s so a savings are significant.</p>
]]></content>
  </entry>
  
</feed>
