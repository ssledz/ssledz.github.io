<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2019-05-05T16:16:25+02:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Option Monad - From Scratch]]></title>
    <link href="http://ssledz.github.io/blog/2019/03/10/option-monad-from-scratch/"/>
    <updated>2019-03-10T11:28:42+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/03/10/option-monad-from-scratch</id>
    <content type="html"><![CDATA[<p>In a post <a href="http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction/">About Monads - a gentle introduction</a>
I have introduced a concept of <code>monad</code>. Since now we should have a good
intuition what <code>monad</code> is and be aware of the situations where 
it can be used to simplify the code and make it more readable.</p>

<p>In this post we will focus on an <code>Option</code> monad which wraps value in a context 
aware of whether or not the value exists. We will start with a problem and solution
not exactly suiting our needs and by adapting <code>Option</code> monad we will try to fix this.</p>

<h2 id="problem">Problem</h2>

<p>There are 3 streams of numbers given as a strings.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">ys</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">zs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>After zipping and flattening we got a stream  called <code>data</code> containing tuples
of 3 strings</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">data</span> <span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">String</span>, <span class="kt">String</span>, <span class="kt">String</span><span class="o">)]</span> <span class="k">=</span> <span class="n">flatten</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">ys</span><span class="o">).</span><span class="n">zip</span><span class="o">(</span><span class="n">zs</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>
<p>Our task is to build a pipeline that generates a stream of <code>Doubles</code> 
which is a result of division one number by another in a sequence in the 
context of the same tuple.</p>

<p>It means that the pipeline for a stream described as</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="o">[(</span><span class="kt">x1</span>,<span class="kt">y1</span>,<span class="kt">z1</span><span class="o">)</span>, <span class="o">(</span><span class="kt">x2</span>,<span class="kt">y2</span>,<span class="kt">z2</span><span class="o">)</span>,<span class="kt">...</span><span class="o">(</span><span class="kt">xn</span>,<span class="kt">yn</span>,<span class="kt">zn</span><span class="o">)]</span>
</span></code></pre></td></tr></table></div></figure>
<p>should generate a stream of numbers given by formula mentioned below</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="o">[(</span><span class="kt">x1/y1/z1</span><span class="o">)</span>, <span class="o">(</span><span class="kt">x2/y2/z2</span><span class="o">)</span>,<span class="kt">...</span> <span class="o">(</span><span class="kt">xn/yn/zn</span><span class="o">)]</span>
</span></code></pre></td></tr></table></div></figure>
<p>This problem can be solved using following scala code</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">pipeline</span> <span class="k">=</span> <span class="n">data</span>
</span><span class="line">    <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">div</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>div</code> function is defined in <code>DivModule</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">object</span> <span class="nc">DivModule</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;arg can&#39;t be null&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">x</span><span class="o">.</span><span class="n">toDouble</span>
</span><span class="line">
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">div</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">z</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;(x | y | z) can&#39;t be null&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">xx</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">yy</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">y</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">zz</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">yy</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">zz</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;y or z can&#39;t be 0&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">xx</span> <span class="o">/</span> <span class="n">yy</span> <span class="o">/</span> <span class="n">zz</span>
</span><span class="line">
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>For a streams of numbers defined at the beginning we should get</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="mf">4.5</span>
</span></code></pre></td></tr></table></div></figure>
<p>The numbers are correct, but take a look on implementation of a <code>parse</code>
and <code>div</code> functions. Those functions are not <code>total</code>. In functional world a function 
which is not <code>total</code> is called <code>partial</code>. A <code>partial</code> function is not defined 
for all values passed as its arguments.</p>

<p>And for following streams of numbers</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;11&quot;</span><span class="o">,</span> <span class="s">&quot;22&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">ys</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;11&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;33&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">zs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;22&quot;</span><span class="o">,</span> <span class="s">&quot;33&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>after running pipeline we get an <code>Exception</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="nc">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">IllegalArgumentException</span><span class="k">:</span> <span class="kt">y</span> <span class="kt">or</span> <span class="kt">z</span> <span class="kt">can</span><span class="err">&#39;</span><span class="kt">t</span> <span class="kt">be</span> <span class="err">0</span>
</span><span class="line">  <span class="kt">at</span> <span class="kt">learning.monad.example.DivModule$.div</span><span class="o">(</span><span class="kt">DivModule.scala:</span><span class="err">28</span><span class="o">)</span>
</span><span class="line">  <span class="kt">at</span> <span class="kt">learning.monad.example.MonadOption$.$anonfun$pipeline$2</span><span class="o">(</span><span class="kt">MonadOption.scala:</span><span class="err">25</span><span class="o">)</span>
</span><span class="line">  <span class="kt">at</span> <span class="kt">learning.monad.example.MonadOption$.$anonfun$pipeline$2$adapted</span><span class="o">(</span><span class="kt">MonadOption.scala:</span><span class="err">25</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>We can easily fix this by lifting a partial function to a total function. 
Let’s add <code>lift</code> function to the <code>DivModule</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">type</span> <span class="kt">Fun3</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Double</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">lift</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Fun3</span><span class="o">,</span> <span class="n">defaultValue</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Fun3</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class="line">  <span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span> <span class="n">defaultValue</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>and modify the <code>pipeline</code> accordingly</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">pipeline</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">data</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">lift</span><span class="o">(</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">div</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">)).</span><span class="n">tupled</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now <code>pipeline</code> generates streams of numbers like</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="o">-</span><span class="mf">1.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>
<p>We can spot that for each undefined value we get <code>-1</code> because of <code>lift</code> 
function which maps all undefined values to the default one, in our case <code>-1</code>.</p>

<p>In order to get only a valid numbers let’s apply a filter</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">pipeline</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">data</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">lift</span><span class="o">(</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">div</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">)).</span><span class="n">tupled</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class="line">  <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>and our result is</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>

<p>For a first look this solution would seem to be good, but what about all
variations of streams for which pipeline could return <code>-1</code> as a correct result ?</p>

<p>For example, when we change fifth number in <code>zs</code> from <code>3</code> to <code>-3</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;11&quot;</span><span class="o">,</span> <span class="s">&quot;22&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">,</span> <span class="s">&quot;9&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">ys</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;11&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;33&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">zs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;0&quot;</span> <span class="o">,</span> <span class="s">&quot;22&quot;</span><span class="o">,</span> <span class="s">&quot;33&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;-3&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>our pipeline will generate</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span>
</span></code></pre></td></tr></table></div></figure>

<p>instead of</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is wrong and changing a default value in <code>lift</code> function doesn’t
fix this, because for each such case we can find a counterexample where
a correct value is filtered out. It is easy to prove that <code>div</code> function
returns numbers from the whole <code>Double</code> space. In category theory there is
a name for such functions (morphisms) - epimorphisms.</p>

<p>And here an <code>Option</code> monad comes to the rescue.</p>

<h2 id="option-monad">Option monad</h2>

<p>In order to implement an <code>Option</code> monad let’s start with defining a data type
constructor</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Option</code> is an algebraic data type constructor parametrized with <code>A</code> in a <code>co-variant</code>
position. We can think of an <code>Option[_]</code> like about container keeping
a value. For now it has no context.</p>

<p>Let’s assigned a context to it by defining a value constructor called <code>Some</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">get</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p>This constructor introduced a context of container with a none empty value.</p>

<p>A context meaning no value (empty container) can be defined with <code>None</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>None</code> reveals why we need a type parameter <code>A</code> to be in <code>co-variant</code> position -
we simply requires <code>None</code> to be cast to any <code>Option[A]</code>.</p>

<p>Recalling a definition of <code>Monad</code> we know that it consists of three parts:</p>

<ul>
  <li>type constructor <code>M[A]</code></li>
  <li>type converter (called <code>unit</code>, <code>pure</code> or <code>return</code>)</li>
  <li>combinator (called <code>bind</code>, <code>&gt;&gt;=</code> or <code>flatMap</code>)</li>
</ul>

<p>First part is fulfilled. Now we have to implement type converter - <code>pure</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">object</span> <span class="nc">Option</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>pure</code> is a function which is responsible for putting a given value
to the minimal meaningful context. For <code>Option</code> we requires that each
non <code>null</code> value should be bind to the <code>Some</code>, in other case
it should be <code>None</code>.</p>

<p>The toughest to implement is a combinator function called <code>flatMap</code>. For
an <code>Option</code> it is very easy task however.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>This higher order function is very powerful and can be used as a primitive
to implement for example <code>map</code> and <code>filter</code> in a following way</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)))</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">p</span> <span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">a</span><span class="o">))</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">else</span> <span class="nc">None</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Thanks to the <code>flatMap</code> we are able to get a value from container, abstracting
whether or not the value exists or not, and apply a <code>map</code> transformation
deciding if we want to put the result again or replace container with an empty one.</p>

<p>Putting all parts together we can define <code>Option</code> monad in <code>scala</code> in the following way</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Option</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">get</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="building-new-version-of-pipeline">Building new version of pipeline</h2>

<p>Let’s return to our problem. First we need to reimplement <code>parse</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">x</span><span class="o">.</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">str</span> <span class="k">=&gt;</span>
</span><span class="line">  <span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="n">toDouble</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span> <span class="nc">None</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Argument and return type has been lifted respectively to 
the <code>Option[String]</code> and <code>Option[Double]</code> type. You can spot
that I have used <code>flatMap</code> to have an access to the <code>String</code> value and
based on the <code>toDouble</code> operation I returned some <code>Double</code> value or nothing -
in case of parse exception. When an argument <code>x</code> is <code>None</code> the function
passed to <code>flatMap</code> is not executed - so I am sure that <code>String</code> passed
to monadic function is not <code>null</code> and I don’t have to make awkward <code>null</code> checks.</p>

<p>Next we need to take care of <code>div</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">div</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">zeroToNone</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">xx</span> <span class="k">&lt;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line">    <span class="n">yy</span> <span class="k">&lt;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">y</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="n">zeroToNone</span><span class="o">)</span>
</span><span class="line">    <span class="n">zz</span> <span class="k">&lt;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">z</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="n">zeroToNone</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">xx</span> <span class="o">/</span> <span class="n">yy</span> <span class="o">/</span> <span class="n">zz</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>String</code> arguments has been lifted to the <code>Option[String]</code> and return type
is now <code>Option[Double]</code>.</p>

<p>An <code>x</code> argument is passed to the <code>parse</code> and finally we have <code>Double</code> 
value in <code>xx</code> variable. If <code>parse</code> returns <code>None</code> then
the whole function <code>div</code> is evaluated to <code>None</code>.</p>

<p>For <code>y</code> and <code>z</code> things works almost the same with one difference - we additionally requires that
<code>yy</code> an <code>zz</code> must be none zero. This is expressed by calling <code>flatMap</code>
with function <code>zeroToNone</code>. For <code>0</code> value <code>zeroToNone</code> returns an empty 
container <code>None</code> which causes that the whole expression <code>parse(y).flatMap(zeroToNone)</code>
is evaluated to <code>None</code> what moves <code>div</code> function to return <code>None</code>.</p>

<p>Finally pipeline could look following</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">pipeline2</span> <span class="k">=</span> <span class="n">data</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">map3</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">))</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">z</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">DivModuleWithOption</span><span class="o">.</span><span class="n">div</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">(</span><span class="n">z</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>This pipeline generates</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="nc">List</span><span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">0.0</span><span class="o">),</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">1.5</span><span class="o">),</span> <span class="nc">Some</span><span class="o">(-</span><span class="mf">1.0</span><span class="o">),</span> <span class="nc">None</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>At the end we need only to filter out nones and get the value out of the <code>Option</code></p>

<p>To do so there is a need to add 3 additional methods to <code>Option</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//skipped for brevity</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">isNonEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">!</span><span class="n">isEmpty</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">get</span> <span class="k">:</span> <span class="kt">A</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>and to corresponding subclasses</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">get</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">get</span> <span class="k">:</span> <span class="kt">Nothing</span> <span class="o">=</span> <span class="o">???</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally the pipeline</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">pipeline2</span> <span class="k">=</span> <span class="n">data</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">map3</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">))</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">z</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="nc">DivModuleWithOption</span><span class="o">.</span><span class="n">div</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">(</span><span class="n">z</span><span class="o">))</span>
</span><span class="line">  <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">isNonEmpty</span><span class="o">)</span>
</span><span class="line">  <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">get</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>generates following stream of numbers</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="nc">List</span><span class="o">(</span><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>and this is all we need.</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-intro-session">Sources to the post</a></li>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-gentle-introduction">Implement monad from scratch - github sources</a></li>
  <li><a href="http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction/">About Monads - a gentle introduction</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monads - Lunch2Learn Session]]></title>
    <link href="http://ssledz.github.io/blog/2019/02/17/monads-lunch2learn-session/"/>
    <updated>2019-02-17T13:33:47+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/02/17/monads-lunch2learn-session</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="http://ssledz.github.io/presentations/monads-intro.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Monads - a Gentle Introduction]]></title>
    <link href="http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction/"/>
    <updated>2019-01-28T00:23:36+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction</id>
    <content type="html"><![CDATA[<p>In functional programming monad is a design pattern which is used to
express how states of computations are changing. It can take a form of some
abstract data type constructor with two abstract functions.</p>

<p>In <code>scala</code> we can define this contract using <code>Monad</code> type class</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">xs</span><span class="o">)(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Functions <code>pure</code> and <code>flatMap</code> for a given monad <code>M[_]</code> have to follow
some laws - I will talk about them later.</p>

<p>Function <code>map</code> can be defined
in terms of <code>flatMap</code> and <code>pure</code> and this is a bonus which we get for a free
when we provide an instance of a Monad for a type <code>M[_]</code>.</p>

<p>We can think about <code>M[A]</code> like about some smart container
for a value (values) of type <code>A</code>. This container abstracts away from how this value
is kept. We can have many flavors of them like container:</p>

<ul>
  <li>aware of whether or not the value exists</li>
  <li>with more then one value</li>
  <li>for which getting the value would trigger some kind of <code>IO</code> operation</li>
  <li>with value which eventually could appear in future</li>
  <li>with value or error</li>
  <li>with value dependent on some kind of state</li>
  <li>with value and some logging information</li>
  <li>etc</li>
</ul>

<p>Monad let us focus on what we want to do with the contained value. It is
like a context in which the value exists. When we want to do some computation
we are abstracting over the context so we aren’t disrupted whether or
not the value exists, we have many of them or the value may appear in a future.
We want just to get the value out of the container for a moment to make
some computation and then put it again. The context is important only when
we want to pull out a value permanently.</p>

<p>Another advantage of the monad is an ability of sequencing the computations.
Having let’s say two computations we can very easily make dependence
between them saying that the computations of the second depends on
a result of the first. Of course this can be scaled to more than two.</p>

<p>At first glance, it may seem to be not so impressive because it is
very common to make such things during coding. But be aware that monad
frees us from thinking about the context in which the value exists. The context
can be for example an asynchronous computation. Dealing with concurrency
is challenging - we have to be very careful to not make a hard to spot mistake.
Monad takes care about this complexity, providing a result of the
first computation as soon as possible giving us possibility to
spawn another computation in asynchronous manner.</p>

<h3 id="laws">Laws</h3>
<p>Each monad needs to follow three laws</p>

<ul>
  <li>Left identity: <code>return a &gt;&gt;= f ≡ f a</code></li>
  <li>Right identity: <code>m &gt;&gt;= return ≡ m</code></li>
  <li>Associativity: <code>(m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</code></li>
</ul>

<p>These laws was taken from haskell because expressions there are very compact and
easy to follow. Function <code>&gt;&gt;=</code> in scala maps to <code>flatMap</code>, <code>return</code> is
just a <code>pure</code>, <code>f x</code> is an application of function <code>f</code> with <code>x</code> and the
last one <code>\x -&gt; ...</code> is a lambda expression.</p>

<p>Laws in scala can be written in a following way (using ScalaCheck)</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">monad</span> <span class="k">=</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">property</span><span class="o">(</span><span class="s">&quot;Left identity: return a &gt;&gt;= f ≡ f a&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span> <span class="k">=&gt;</span>
</span><span class="line">  <span class="o">(</span><span class="n">`return`</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span><span class="o">)</span> <span class="o">===</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">property</span><span class="o">(</span><span class="s">&quot;Right identity: m &gt;&gt;= return ≡ m&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="n">m</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class="line">  <span class="o">(</span><span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="n">`return`</span><span class="o">)</span> <span class="o">===</span> <span class="n">m</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">property</span><span class="o">(</span><span class="s">&quot;Associativity: (m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\\x -&gt; f x &gt;&gt;= g)&quot;</span><span class="o">)</span> <span class="k">=</span>
</span><span class="line">  <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">m</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">],</span> <span class="n">g</span><span class="k">:</span> <span class="kt">B</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">C</span><span class="o">])</span> <span class="k">=&gt;</span>
</span><span class="line">    <span class="o">((</span><span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span><span class="o">)</span> <span class="o">&gt;&gt;=</span> <span class="n">g</span><span class="o">)</span> <span class="o">===</span> <span class="o">(</span><span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">&gt;&gt;=</span> <span class="n">g</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">`return`</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">monad</span><span class="o">.</span><span class="n">pure</span> <span class="k">_</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span> <span class="k">implicit</span> <span class="k">class</span> <span class="nc">MonadOps</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">m</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="o">&gt;&gt;=[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">monad</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">m</span><span class="o">)(</span><span class="n">f</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>If you are curious about implementation details take a look on this <a href="https://raw.githubusercontent.com/ssledz/ssledz.github.io-src/master/monad-gentle-introduction/src/test/scala/monad/intro/AbstractMonadProperties.scala">class</a></p>

<h3 id="flavors-of-monads">Flavors of monads</h3>

<p>This section is a placeholder for a list of posts about monads mentioned in
this article. I will try my best to deliver a missing content. Watch my blog
for an update.</p>

<p>Monads:</p>

<ul>
  <li><a href="http://ssledz.github.io/blog/2019/03/10/option-monad-from-scratch/">Option</a></li>
  <li>Either</li>
  <li>Id</li>
  <li>Writer</li>
  <li>Reader</li>
  <li>State</li>
  <li>Try</li>
  <li>IO</li>
  <li>List</li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://www.quora.com/What-are-monads-in-functional-programming-and-why-are-they-useful-Are-they-a-generic-solution-to-the-problem-of-state-in-FP-or-Haskell-specific-Are-they-specific-to-Haskell-or-are-they-encountered-in-other-FP-languages">What are monads in functional programming and why are they useful?</a></li>
  <li><a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">You Could Have Invented Monads!</a></li>
  <li><a href="https://dev.to/theodesp/explain-monads-like-im-five">Explain Monads Like I’m five</a></li>
  <li><a href="https://wiki.haskell.org/All_About_Monads">All About Monads</a></li>
  <li><a href="https://www.haskell.org/tutorial/monads.html">A Gentle Introduction to Haskell</a></li>
  <li><a href="http://learnyouahaskell.com/a-fistful-of-monads">A Fistful of Monads</a></li>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-gentle-introduction">Sources to the post</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monad Transformers - Part 2]]></title>
    <link href="http://ssledz.github.io/blog/2019/01/24/monad-transformers-part-2/"/>
    <updated>2019-01-24T21:46:06+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/01/24/monad-transformers-part-2</id>
    <content type="html"><![CDATA[<p>In a previous <a href="http://ssledz.github.io/blog/2018/12/18/monad-transformers-a-quick-recap/">post</a>
I introduced monad transformers and since now we should have a good feeling
about their usage and how they can be helpful.</p>

<p>Designing a monad transformer we decided to fix inner most monad. This
decision was dictated by the fact that we couldn’t replace code dependent
on internal representation of that inner most monad. I think that this step
could not be as obvious as I expected to be. And now I will try to
make it more clear.</p>

<p>Let’s try to bite the problem from different side. Assume that we can write
a monad transformer and know nothing about monads internal representation.
Let’s call it <code>CMonad</code> (shorthand from <code>ComposedMonad</code>).</p>

<p>Such a class could look like</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">G</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="o">???</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Here <code>F[_]</code> and <code>G[_]</code> are higher kinded type representing outer and inner most monad.</p>

<p>Then a problem introduced in a previous post could be solved following</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">Future</span>, <span class="kt">Option</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="nc">CMonad</span><span class="o">(</span><span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">))</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="nc">CMonad</span><span class="o">(</span><span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">street</span>
</span></code></pre></td></tr></table></div></figure>

<p>Of course it doesn’t work because we haven’t yet provided implementation for <code>flatMap</code> and <code>map</code></p>

<p>Let’s start with <code>flatMap</code>. To make things clear a little I introduced a new
method <code>flatMapF</code> and defined <code>flatMap</code> in terms of <code>flatMapF</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">G</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="o">???</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>In order to apply <code>f : A =&gt; F[G[B]]</code> we need to extract <code>A</code> from <code>value: F[G[A]]</code></p>

<p>One attempt could end with following code</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">G</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">     <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">ga</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class="line">       <span class="k">val</span> <span class="n">gb</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">G</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">ga</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span>
</span><span class="line">         <span class="o">???</span>
</span><span class="line">       <span class="o">}</span>
</span><span class="line">       <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">gb</span><span class="o">)</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"> <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">ComposedMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now we can apply <code>f</code> with <code>A</code> and we will get <code>fgb : F[G[B]]</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"> <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">     <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">ga</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class="line">       <span class="k">val</span> <span class="n">gb</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">G</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">ga</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span>
</span><span class="line">         <span class="k">val</span> <span class="n">fgb</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]]</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">         <span class="o">???</span>
</span><span class="line">       <span class="o">}</span>
</span><span class="line">       <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">gb</span><span class="o">)</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>In order to make compiler happy we need to take one step more - extract
<code>G[B]</code> from <code>F[G[B]]</code> and return that value from inner most <code>flatMap</code>.
This of course is not possible knowing only that <code>F</code> and <code>G</code> form a monad.</p>

<p>Another attempt can lead us to the code like</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"> <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">   <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">     <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">ga</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class="line">       <span class="k">val</span> <span class="n">gfgb</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]]]</span> <span class="k">=</span> <span class="n">G</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">ga</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span>
</span><span class="line">         <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">       <span class="o">}</span>
</span><span class="line">       <span class="o">???</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>And now we need to extract <code>F[G[B]]</code> from <code>G[F[G[B]]]</code>. This also is not possible
if we know nothing about internal representation of <code>G</code>.</p>

<p>All this leads us to the conclusion that we can’t write a monad transformer
if we know nothing, about the monads.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monad Transformers - a Quick Recap]]></title>
    <link href="http://ssledz.github.io/blog/2018/12/18/monad-transformers-a-quick-recap/"/>
    <updated>2018-12-18T23:19:06+01:00</updated>
    <id>http://ssledz.github.io/blog/2018/12/18/monad-transformers-a-quick-recap</id>
    <content type="html"><![CDATA[<p>Someone have said that <strong>monads</strong> are like burrito, if you ever taste one than
you can’t imagine live without it.</p>

<p><strong>Monads</strong> are a powerful tool. Thanks to them we can abstract over computation.
We can make one computation depended on another and if needed fail fast.</p>

<p>But one day the time will come when we have two different <strong>monads</strong> and we will find
out that they don’t compose !</p>

<p>Let’s make some code to visualize the problem. I am going to show two use
cases and I will start with the simplest one.</p>

<h3 id="case-1">Case 1</h3>
<p>We have two entities : <code>User</code> and <code>Address</code> and two functions retrieving data
with the respect of a given predicate</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Address</span><span class="o">(</span><span class="n">userId</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">street</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span><span class="line"><span class="k">def</span> <span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">userId</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Address</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure>
<p>Our goal is to write a function which for a given login returns user’s street name</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">)</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">street</span>
</span></code></pre></td></tr></table></div></figure>

<p>So far so good - quite simple and classic enterprise task :)</p>

<p>However there are two caveats to this solution worth noting. What happened
if there is no such user or the user exists but it has no address ?
It is obvious that we will see <code>Null Pointer Exception</code> - sick !</p>

<p>Of course we can filter out those nulls and rewrite functions to be aware of
them but as you already know this is also not a good solution. Can we
do better ? Yes we can, let’s introduce a context aware
of whether value exists or not (<code>Option</code> data type).</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">User</span><span class="o">]]</span> <span class="k">=</span> <span class="o">???</span>
</span><span class="line"><span class="k">def</span> <span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">userId</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Address</span><span class="o">]]</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure>
<p>But wait below function is not compiling…</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">maybeUser</span> <span class="k">&lt;-</span> <span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">)</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="n">maybeUser</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">street</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>It turns out that <code>Future</code> and <code>Option</code> <strong>monads</strong> do not compose in such a way.
For a first look, composition looks very natural in <code>for</code> comprehension,
but if we transform it into series of <code>flatMap</code> and <code>map</code> at the end, we
will notice that the puzzles don’t feet. If we start with <code>Future</code> than the
function passed to <code>flatMap</code> must return a <code>Future</code>. In our case we want
to return <code>Option</code> in the middle and based on it return a next <code>Future</code>
being a container fo an user’s possible address.</p>

<p>Equipped with this knowledge we can rewrite our function in the following
way</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span>
</span><span class="line">  <span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">user</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">street</span><span class="o">))</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="nc">None</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Now it compiles and return correct results. But it is not as readable as
our first naive attempt. Can we do better ? Ideally we would want to have
something like</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">???</span> <span class="o">=</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="o">???(</span><span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">))</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="o">???(</span><span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">street</span>
</span></code></pre></td></tr></table></div></figure>
<p>We need somehow to fuse <code>Future</code> with <code>Option</code> in a smart way to make
the composition possible.</p>

<h4 id="fusing-future-with-option">Fusing <code>Future</code> with <code>Option</code></h4>
<p>We already know that <code>for</code> comprehension deals with <code>flatMap</code>, <code>map</code>,
<code>withFilter</code> and <code>foreach</code>. In our case compiler needs only <code>flaMap</code> and <code>map</code>
to de sugar <code>for</code>. So let’s introduce a new data type <code>OptionFuture</code>,
which wraps <code>Future[Option[A]]</code> and in a proper way handles
flatMap in order to compose <code>Future</code> with <code>Option</code>.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">OptionFuture</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">OptionFuture</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ex</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">OptionFuture</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]])</span>
</span><span class="line">                 <span class="o">(</span><span class="k">implicit</span> <span class="n">ex</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">OptionFuture</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">OptionFuture</span><span class="o">(</span>
</span><span class="line">    <span class="n">value</span><span class="o">.</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">as</span> <span class="k">=&gt;</span>
</span><span class="line">      <span class="n">as</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="nc">None</span><span class="o">)</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ex</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">OptionFuture</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="nc">OptionFuture</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">})</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Take a little time to better look at <code>OptionFuture</code> data type.
First question coming to my mind is - can we make it more abstract ?
It turns out that we can abstract over <code>Future</code> very easly. In terms
of <code>Future</code> we are calling only two kinds of functions:</p>

<ul>
  <li><code>flatMap</code></li>
  <li><code>Future.successful</code></li>
</ul>

<p>It means that <code>Future</code> can be swapped with <code>Monad</code>.</p>

<p>What about the <code>Option</code> ? Over the <code>Option</code> we are performing <strong>pattern matching</strong>
- so it means that we need to know something about it structure.</p>

<p>And because of that we can’t to abstract over it.</p>

<p>This leads us to the definition of <strong>monad transformer</strong> for <code>Option</code> and
we call it <code>OptionT</code></p>

<h4 id="monad-transformer-for-option">Monad transformer for <code>Option</code></h4>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">OptionT</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">value</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">OptionT</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">B</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">OptionT</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMapF</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">OptionT</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">OptionT</span><span class="o">(</span>
</span><span class="line">    <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">as</span> <span class="k">=&gt;</span>
</span><span class="line">      <span class="n">as</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class="line">        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">None</span><span class="o">)</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">OptionT</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="nc">OptionT</span><span class="o">(</span><span class="n">F</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">})</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p><code>OptionT[F[_], A]</code> abstracts over <code>F</code> and <code>A</code> and it only requires that <code>F</code>
is a monad. The name of the <strong>monad transformer</strong> comes from the fact that,
in order to implement this wrapper, we need to know what the inner
most monad in the stack is - in this case <code>Option</code>. Without this knowledge
we can’t compose any two given monads with itself.</p>

<h4 id="monad-quick-recap">Monad quick recap</h4>
<p>A minimal api for monad can be described by following trait</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">xs</span><span class="o">)(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Monad</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">M</span><span class="o">[</span><span class="k">_</span><span class="o">]](</span><span class="k">implicit</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">])</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">]</span> <span class="k">=</span> <span class="n">m</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>And its instance for <code>Future</code> you can find below.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">object</span> <span class="nc">MonadInstances</span> <span class="o">{</span>
</span><span class="line">  <span class="k">implicit</span> <span class="k">def</span> <span class="n">futureInstance</span><span class="o">(</span><span class="k">implicit</span> <span class="n">ex</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">Future</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="k">new</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">Future</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">      <span class="k">override</span> <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">      <span class="k">override</span> <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">f</span><span class="o">)(</span><span class="n">ex</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="a-solution">A solution</h4>
<p>Putting all pieces together we can finally write</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>
</span><span class="line"><span class="k">import</span> <span class="nn">MonadInstances._</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">OptionT</span><span class="o">[</span><span class="kt">Future</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="nc">OptionT</span><span class="o">(</span><span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">))</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="nc">OptionT</span><span class="o">(</span><span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">street</span>
</span></code></pre></td></tr></table></div></figure>
<p>of course we can return directly <code>Future[Option[String]]</code> just by calling
<code>value</code> function on the result like</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">findStreetByLogin</span><span class="o">(</span><span class="n">login</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="k">=</span>
</span><span class="line">  <span class="o">(</span><span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">user</span> <span class="k">&lt;-</span> <span class="nc">OptionT</span><span class="o">(</span><span class="n">findUserByLogin</span><span class="o">(</span><span class="n">login</span><span class="o">))</span>
</span><span class="line">    <span class="n">address</span> <span class="k">&lt;-</span> <span class="nc">OptionT</span><span class="o">(</span><span class="n">findAddressByUserId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">address</span><span class="o">.</span><span class="n">street</span><span class="o">).</span><span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>
<p>`
and that’s it.</p>

<h4 id="final-word">Final word</h4>

<p>At the beginning I said that I have two cases to show, but because the
post could be to long to go through without a brake I decided to split it
into two pieces. The whole code base used in this post can be found in
the following <a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-transformer">link</a></p>

<p>More in <a href="http://ssledz.github.io/blog/2019/01/24/monad-transformers-part-2/">part 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentle Introduction to Functional Programming - Live Coding Session]]></title>
    <link href="http://ssledz.github.io/blog/2018/12/05/genetle-fp-intro/"/>
    <updated>2018-12-05T21:33:42+01:00</updated>
    <id>http://ssledz.github.io/blog/2018/12/05/genetle-fp-intro</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="http://ssledz.github.io/presentations/gentle-fp-intro.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - a Quick Introduction]]></title>
    <link href="http://ssledz.github.io/blog/2017/10/25/recursion-a-quick-introduction/"/>
    <updated>2017-10-25T02:33:42+02:00</updated>
    <id>http://ssledz.github.io/blog/2017/10/25/recursion-a-quick-introduction</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="http://ssledz.github.io/presentations/recursion.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Bash - Introduction to fun.sh Library]]></title>
    <link href="http://ssledz.github.io/blog/2017/08/21/functional-programming-in-bash-introduction-to-fun-dot-sh-library/"/>
    <updated>2017-08-21T00:28:33+02:00</updated>
    <id>http://ssledz.github.io/blog/2017/08/21/functional-programming-in-bash-introduction-to-fun-dot-sh-library</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="http://ssledz.github.io/presentations/bash-fun.html">here</a>.</p>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://github.com/ssledz/bash-fun">bash-fun</a></li>
  <li><a href="https://github.com/ssledz/bash-import">bash-import</a></li>
  <li><a href="https://github.com/ssledz/bash-repo">bash-repo</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Pass Arrays as Parameters in Bash]]></title>
    <link href="http://ssledz.github.io/blog/2017/01/04/how-to-pass-arrays-as-parameters-in-bash/"/>
    <updated>2017-01-04T20:34:05+01:00</updated>
    <id>http://ssledz.github.io/blog/2017/01/04/how-to-pass-arrays-as-parameters-in-bash</id>
    <content type="html"><![CDATA[<p>Let’s say we have a function in bash which simply iterates through all elements from array and prints them on 
the standard output.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">printElems() {
</span><span class="line">  for e in ${arr[@]}; do 
</span><span class="line">    echo $e
</span><span class="line">  done
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>We can call this function in the following way</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr=(el1 el2 el3 el4)
</span><span class="line">printElems</span></code></pre></td></tr></table></div></figure>

<p>If we want to call function with other parameters we need to update arr variable accordingly</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr=(el1 el2 el3 el4)
</span><span class="line">printElems
</span><span class="line">arr=(el5 el6 el7 el8)
</span><span class="line">printElems</span></code></pre></td></tr></table></div></figure>

<p>So far so good. But what if we want to make our <code>printElems</code> function generic and put it to the separate file. Is
 it wise 
enough to stay with our solution to maintain <code>arr</code> variable in global scope ? The answer is - it depends on the size
 of 
the project. It is obvious that maintaining global variables is cumbersome in projects which are getting bigger and 
bigger during their lifetime. So that is there any smart way to improve our function to not pollute the global scope ?</p>

<p>The answer is yes, and in this task will help us bash feature called ‘<strong>indirect variable reference</strong>’.</p>

<p>Below is an improved version of <code>printElem</code> function. A new function (<code>printElems2</code>) is not dealing with global 
variable at
 all. In fact the function receives a variable name and thx to the indirect reference operator <code>$(!variable_name)</code>
 the value of the function parameter is set to local variable called <code>my_arr</code>.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">printElems2() {
</span><span class="line">  local my_arr=${!1}
</span><span class="line">  for e in ${my_arr[@]}; do 
</span><span class="line">    echo $e
</span><span class="line">  done
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr1=(el1 el2 el3 el4)
</span><span class="line">arr2=(el5 el6 el7 el8)
</span><span class="line">
</span><span class="line">printElems2 arr1[@]
</span><span class="line">printElems2 arr2[@]
</span></code></pre></td></tr></table></div></figure>

<p>More information about ‘indirect variable reference’ feature you 
can find <a href="http://www.tldp.org/LDP/abs/html/ivr.html#IVRREF">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Sbt Setup for Spark Project]]></title>
    <link href="http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project/"/>
    <updated>2017-01-04T18:03:14+01:00</updated>
    <id>http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project</id>
    <content type="html"><![CDATA[<p>Below can be found a simple sbt setup for a spark application in scala.</p>

<p>Directory layout</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">find .
</span><span class="line">.
</span><span class="line">./build.sbt
</span><span class="line">./src/main
</span><span class="line">./src/main/scala
</span><span class="line">./src/main/scala/pl
</span><span class="line">./src/main/scala/pl/softech
</span><span class="line">./src/main/scala/pl/softech/WordCountExample.scala
</span><span class="line">./src/main/resources
</span><span class="line">./src/main/resources/log4j.properties
</span><span class="line">./src/main/resources/words.txt
</span></code></pre></td></tr></table></div></figure>

<p>build.sbt</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">name := "spark-simple-app"
</span><span class="line">
</span><span class="line">version := "1.0"
</span><span class="line">
</span><span class="line">scalaVersion := "2.11.8"
</span><span class="line">
</span><span class="line">val sparkVersion = "2.1.0"
</span><span class="line">
</span><span class="line">libraryDependencies += "org.apache.spark" %% "spark-core" % sparkVersion</span></code></pre></td></tr></table></div></figure>
<p>log4j.properties</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">log4j.rootCategory=ERROR, console
</span><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender
</span><span class="line">log4j.appender.console.target=System.err
</span><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout
</span><span class="line">log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n</span></code></pre></td></tr></table></div></figure>
<p>WordCountExample.scala</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">package</span> <span class="nn">pl.softech</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">org.apache.spark.</span><span class="o">{</span><span class="nc">SparkConf</span><span class="o">,</span> <span class="nc">SparkContext</span><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">WordCountExample</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">conf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkConf</span><span class="o">().</span><span class="n">setAppName</span><span class="o">(</span><span class="s">&quot;spark-simple-app&quot;</span><span class="o">).</span><span class="n">setMaster</span><span class="o">(</span><span class="s">&quot;local[*]&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">sc</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkContext</span><span class="o">(</span><span class="n">conf</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">textFile</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="s">&quot;src/main/resources/words.txt&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">counts</span> <span class="k">=</span> <span class="n">textFile</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">))</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">word</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span>
</span><span class="line">      <span class="o">.</span><span class="n">reduceByKey</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">sortBy</span><span class="o">(-</span><span class="k">_</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="o">(</span><span class="n">counts</span><span class="o">.</span><span class="n">collect</span><span class="o">().</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">))</span>
</span><span class="line">
</span><span class="line">    <span class="n">sc</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Sources can be found <a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/spark-simple-template">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Scala - My Insights]]></title>
    <link href="http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights/"/>
    <updated>2016-11-08T13:32:38+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights</id>
    <content type="html"><![CDATA[<p>It passed almost 5 months since I have been learning <em>Scala</em> programming language. This learning is a part of bigger 
path which I decided to go through to be more familiar with current trends in <em>big data</em>, <em>machine learning</em> and 
<em>cloud computing</em>.</p>

<p>When I decided to start learning scala the first question coming into my mind was how to start ?</p>

<p>Because I am rather a fun of books, I bought one - <strong>“Programming Scala: Scalability = Functional Programming + Objects” 
by Dean Wampler and Alex Payne”</strong> and started reading…. but this was not a good idea. The book I have chosen was 
written in not an easy going style and I think was too hard for the beginning. After few hundreds of pages I felt lost.
At the same time on <em>coursera</em> <strong>‘Functional Programming Principles in Scala’</strong> course was reactivated.
Not thinking too much I signed in and started participating. After few weeks I earn a certificate of accomplishment 
but this was not an end of my journey. I started participating in another course 
<strong>“Functional Program Design in Scala”</strong> from the same author (Martin Odersky) as the previous one. In parallel I have 
started reading a book <strong>“Programming in Scala Second Edition” by Martin Odersky, Lex Spoon, Bill Venners</strong> 
and I found it very helpful. Currently (in the time of writing this post) I have done <strong>“Parallel programming”</strong> 
course and already enrolled for a <strong>“Big Data Analysis with Scala and Spark”</strong> (still waiting for course publishing)</p>

<p>I think the knowledge I acquired, thanks to those courses and book, is sufficient to start writing and reading programs
 in scala. Of course it takes some time to be as proficient as in java but I am little closer to this target each day.</p>

<h3 id="resources">Resources</h3>
<p>The aim of this section is to gather the valuable resources regarding scala.</p>

<p><strong>Online courses</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ul>

<p><strong>Books</strong></p>

<ul>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.goodreads.com/book/show/11335855-scala-for-the-impatient">Scala for the Impatient</a></li>
  <li><a href="https://www.goodreads.com/book/show/22491889-programming-scala">Programming Scala: Scalability = Functional Programming + Objects</a></li>
</ul>

<p><strong>Cheat sheets</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/BDqfw/cheat-sheet">Scala cheat sheet</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/H8MtC/reactive-cheat-sheet">Scala reactive cheat sheet</a></li>
  <li><a href="http://docs.scala-lang.org/cheatsheets/">Scala cheat sheet from scala-lang.org</a></li>
  <li><a href="https://gist.github.com/ssledz/c1c1ae9b9401d8c2455ae01d9045b2d5">Scala cheat sheet written by me</a></li>
</ul>

<p><strong>Tutorials</strong></p>

<ul>
  <li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf">Scala By Example</a></li>
  <li><a href="https://twitter.github.io/scala_school/index.html">Scala School</a></li>
  <li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html">Tour of scala</a></li>
</ul>

<p><strong>Libs</strong></p>

<ul>
  <li><a href="https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md">Scalacheck</a></li>
  <li><a href="https://scalameter.github.io/">ScalaMeter</a></li>
  <li><a href="http://akka.io/docs/">Akka</a></li>
</ul>

<p><strong>Other</strong></p>

<ul>
  <li><a href="http://stackoverflow.com/tags/scala/info">scala on stackoverflow</a></li>
</ul>

<h3 id="first-steps">First steps</h3>
<p>My recommendation about ordering of going through the resources for beginners:</p>

<ol>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Scala - Writing Function : Flatten]]></title>
    <link href="http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten/"/>
    <updated>2016-07-25T00:25:57+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten</id>
    <content type="html"><![CDATA[<p>Few weeks ago since now :) I started participating in a course <strong>‘Functional Programming Principles in Scala’</strong> by 
<strong>Martin Odersky</strong>. I have already completed 4 weeks (course consists of 6 weeks) and I can tell honestly that this is 
the best course I’ve ever been doing.</p>

<p>My knowledge about scala is still increasing !</p>

<p>Below you can find a sample of what I can now do. The problem is to implement function
<code>flatten(xs: List[Any]): List[Any]</code> which takes a list of anything an tries to flatten it. For example</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">flatten</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="mi">2</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">))))</span>
</span></code></pre></td></tr></table></div></figure>

<p>should return a following list</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="nc">List</span><span class="o">[</span><span class="kt">Any</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<div><script src="https://gist.github.com/fa5227685dda83e8b895ac9578a206b6.js"></script>
<noscript><pre><code>/**
  * Created by ssledz on 25.07.16.
  */
object Flatten {

  def flatten(xs: List[Any]): List[Any] = xs match {
    case List() =&gt; Nil
    case y :: ys =&gt; {
      y match {
        case z: List[Any] =&gt; flatten(z)
        case _ =&gt; List(y)
      }
    } ::: flatten(ys)
    case _ =&gt; List(xs)

  }

  def main(args: Array[String]) {
    List(
      flatten(List(List(1, 1), 2, List(3, List(5, 8)))),
      flatten(List(1, 2, 3)),
      flatten(List(List(1, 2), 3, List(4))),
      flatten(List(List(List(List(1, 2), 3, List(4))), List(5, 6, 7)))
    ) foreach println
  }

}</code></pre></noscript></div>

<p>At the end I would like to say <strong>‘thank you’</strong> to <strong><a href="https://www.atlassian.com/">Atlassian</a></strong> company for paying a half 
for this course !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto Going Back to the Beginning of the Line in Tmux After Remapping Prefix to C-a]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/23/howto-going-back-to-the-beginning-of-the-line-in-tmux-after-remapping-prefix-to-c-a/"/>
    <updated>2016-05-23T02:05:54+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/23/howto-going-back-to-the-beginning-of-the-line-in-tmux-after-remapping-prefix-to-c-a</id>
    <content type="html"><![CDATA[<p><code>tmux</code> is a great tool. I have been using it since I think half year. 
Before I used to use <code>screen</code>, but only to manage my remote shells. Now I am using <code>tmux</code> for
local and remote shell management.</p>

<p>In order to make a switch from <code>screen</code> to <code>tmux</code> smooth 
I decided to remap default binding for <em>prefix</em> from <em>C-b</em> to <em>C-a</em> (like in screen). This caused
that one of my favorite shortcuts - <code>C-a</code> for going back to the beginning of the line, 
stopped working.</p>

<p>Recently I have discovered that making:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind C-a send-prefix</span></code></pre></td></tr></table></div></figure>

<p>binds the shortcut to this sequence <code>C-a C-a</code> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hot Swap in Java With DCEVM and HotSwapAgent - a JRebel Free Alternative]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative/"/>
    <updated>2016-05-16T22:38:40+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative</id>
    <content type="html"><![CDATA[<p>Reloading a bytecode in a virtual machine when application is running is very limited. In fact 
HotSpot(TM) VM allows only changing method bodies. To address this problem some commercial and open source tools were 
created. Among them is <em>Dynamic Code Evolution Virtual Machine</em> (<strong>DCEVM</strong>) and 
<strong>HotSwapAgent</strong> - very promising open source tool.</p>

<p>I have already some experience in using <strong>DCEVM</strong>. Some times ago I have been working for an insurance company where 
I was using this modified vm to develop a code in a gosu language. <a href="https://gosu-lang.github.io/">Gosu</a> is another 
JVM language. I remember that then hot swapping worked very well.</p>

<p>Let’s try this tool. First we need to patch our current jvm.</p>

<h3 id="installing-dynamic-code-evolution-vm">Installing Dynamic Code Evolution VM</h3>

<p>In order to enhance current Java (JRE/JDK) installations with <strong>DCEVM</strong>
you need to download the latest <a href="https://dcevm.github.io/">release</a> 
of <strong>DCEVM</strong> installer for a given major java version,</p>

<blockquote>
  <p><code>java 7</code> and <code>java 8</code> are supported</p>
</blockquote>

<p>run the installer</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -jar DCEVM-light-8u74-installer.jar</span></code></pre></td></tr></table></div></figure>

<p>then select a proper java installation directory on your disc and press <em>Install DCEVM as altjvm</em></p>

<p><img class="center" src="http://ssledz.github.io/images/custom/dcevm-installer.png" /></p>

<p>That’s all really. Very simple isn’t it ?</p>

<p>To validate the installation run:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -version</span></code></pre></td></tr></table></div></figure>

<p>and if everything went alright you should see something similar to below
output:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java version "1.8.0_91"
</span><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
</span><span class="line">Dynamic Code Evolution 64-Bit Server VM (build 25.71-b01-dcevmlight-10, mixed mode)</span></code></pre></td></tr></table></div></figure>

<p>Note that in the third line instead of <code>Java HotSpot(TM)</code> we have 
now <code>Dynamic Code Evolution</code>.</p>

<h4 id="kind-of-installers">Kind of installers</h4>
<p>Worth noting is the fact that there are two kind of installers</p>

<ul>
  <li><em>light</em></li>
  <li>and <em>full</em></li>
</ul>

<p>The latter one supports more features (for example, it supports removal of superclasses),
but because of the maintenance issues the <em>full</em> edition is available 
for a fewer versions of jdk.</p>

<h3 id="downloading-hotswapagent">Downloading HotswapAgent</h3>

<p>HotswapAgent does the work of reloading resources and framework configuration. 
So in order to have a support for reloading a spring bean definitions just 
after a change occurs, we need to perform one more step - 
download latest release of <a href="https://github.com/HotswapProjects/HotswapAgent/releases">hotswap-agent.jar</a>
and put it anywhere. For example here: <code>~/bin/hotswap/hotswap-agent.jar</code>.</p>

<h2 id="running-application-in-order-to-test-hot-swapping">Running application in order to test hot swapping</h2>

<p>I will use <code>Main</code> and <code>Main2</code> classes to play with hot swapping:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">            <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="n">Foo</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;tick - %08d\t&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">++);</span>
</span><span class="line">        <span class="n">foo</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mainLoop</span><span class="o">();</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And the second one:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main2</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getFields</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="n">String</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;fields=%s\t methods=%s\n&quot;</span><span class="o">,</span> <span class="n">fields</span><span class="o">,</span> <span class="n">methods</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mainLoop</span><span class="o">();</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I will test following use cases:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">case</th>
      <th style="text-align: center">works ?</th>
      <th style="text-align: left">Test class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>1.</strong></td>
      <td style="text-align: left">change body method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>2.</strong></td>
      <td style="text-align: left">add method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>3.</strong></td>
      <td style="text-align: left">add field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>4.</strong></td>
      <td style="text-align: left">remove field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>5.</strong></td>
      <td style="text-align: left">remove method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
  </tbody>
</table>

<h3 id="intellij-idea-settings">Intellij IDEA settings</h3>

<p>All tests will be performed using Intellij IDEA. Ensure that following options are set</p>

<ul>
  <li>enable <a href="https://www.jetbrains.com/help/idea/2016.1/reloading-classes.html?origin=old_help">classes reloading</a></li>
</ul>

<p><img class="center" src="http://ssledz.github.io/images/custom/idea/dcevm-hotswap-settings.png" /></p>

<ul>
  <li>pass <code>-XXaltjvm=dcevm</code> vm option to run/debug configuration</li>
</ul>

<p><img class="center" src="http://ssledz.github.io/images/custom/idea/dcevm-run-dbg-conf.png" /></p>

<h3 id="case-1--change-body-method">Case 1 : change body method</h3>

<p>Run debug. In the console you should see following output:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000000</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000000</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000001</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000001</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000002</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000002</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then change <code>counter++;</code> to <code>counter+=2;</code> in <code>Foo</code> class.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter</span><span class="o">+=</span><span class="mi">2</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile and after few seconds you should spot that the classes were reloaded successfully</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000008</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="case-2--add-method">Case 2 : add method</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add method</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tbar - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>to the <code>Foo</code> class and call it from the <code>mainLoop</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;tick - %08d\t&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">++);</span>
</span><span class="line">    <span class="n">foo</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">    <span class="n">foo</span><span class="o">.</span><span class="na">bar</span><span class="o">();</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000006</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000007</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000007</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000007</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000008</span>
</span></code></pre></td></tr></table></div></figure>

<p>Classes were reloaded successfully.</p>

<h3 id="case-3--add-field">Case 3 : add field</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add field <code>int counter2</code> to <code>Foo</code> class and append following
two statements to the end of <code>foo</code> method.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tcounter2 - %08d&quot;</span><span class="o">,</span> <span class="n">counter2</span><span class="o">);</span>
</span><span class="line"><span class="n">counter2</span><span class="o">++;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Foo</code> class should look following</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">counter2</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tcounter2 - %08d&quot;</span><span class="o">,</span> <span class="n">counter2</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter2</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile. And appears</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000002</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000002</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000000</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000001</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000002</span>
</span></code></pre></td></tr></table></div></figure>

<p>that this kind of change was also reloaded successfully.</p>

<h3 id="case-4--remove-field">Case 4 : remove field</h3>

<p>Run debug. In the console you should see following output:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then add two public fields <code>int number</code> and <code>String name</code> to the <code>Foo</code> class.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then remove <code>number</code> field and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>The change was reloaded.</p>

<h3 id="case-5--remove-method">Case 5 : remove method</h3>

<p>Revert all changes in <code>Main2</code> class and run debug. Add</p>

<ul>
  <li>public field <code>String name</code></li>
  <li>public method <code>String getName()</code></li>
</ul>

<p>to the <code>Foo</code> class. Then hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then remove <code>getName()</code> method and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Seems that this change was also reloaded successfully.</p>

<h2 id="notes">Notes</h2>

<p>During the play with hot swapping in Intellij IDEA you could notice that for some circumstances code would not be 
reloaded. Intellij IDEA has a following limitation about which you need to be aware:</p>

<blockquote>
  <p>the old code is still used until the VM exits the obsolete stack frame</p>
</blockquote>

<p>About that you can read <a href="http://stackoverflow
.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">here</a></p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://dcevm.github.io/">DCEVM</a></li>
  <li><a href="http://www.hotswapagent.org/quick-start">HotswapAgent Quick start</a></li>
  <li><a href="https://github.com/HotswapProjects">HotswapProjects</a></li>
  <li><a href="http://stackoverflow.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">Hotswap/DCEVM doesn’t work in Intellij IDEA (Community Version)</a></li>
  <li><a href="https://wiki.wocommunity.org/display/WOL/Using+DCEVM+and+Hotswap+for+rapid+turnaround">Using DCEVM and Hotswap for rapid turnaround</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Professional, Java SE 8 Programmer 1Z0-809 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review/"/>
    <updated>2016-05-15T19:34:09+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review</id>
    <content type="html"><![CDATA[<p>Just after passing <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
(about that you can read <a href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">here</a>) 
and being impressed by <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>,
I decided to buy the newly released <a href="https://www.goodreads.com/book/show/23650477-ocp">OCP: Oracle Certified Professional Java Se 8 Programmer II Study Guide: Exam 1Z0-809</a>.
It was a really good purchase.</p>

<p>The book is awesome. It has a similar style and feel as the <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It covers many new features, in details, introduced in <code>java 8</code>.
I learn a lot about <code>lambda</code>, <code>collection streams</code>, <code>date api</code> 
and so on. I can tell you that this book was worth its money.</p>

<p>It took me almost 4 months to go through this book. To be honest I read
it two times. Same as previously (<a href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">OCA - review</a>) 
I was generally reading the book during my way to work. 
First time I really haven’t paid attention on solving tests. 
I have just gone through the book to better know
<code>java 8</code>. After that I took a few weeks break. When I started solving
test questions I noticed that I had a problem with <code>java API</code>. It is
really annoying that the test exam requires from developer to remember
api. In 2016 we have <code>ides</code>, written mainly for this purpose. Due this
fact I started reading a book again. This time however, 
I have been solving test question just after I read a chapter.</p>

<p>In order to prepare to the final exam I used <a href="https://sybextestbanks.wiley.com/public/">sybex</a>
platform. Due the fact that I bought the book I got an access to this
site where I found 411 test questions divided into 3 sets:</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (211) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test</li>
</ul>

<p>Moreover I had an access to the following resources:</p>

<ul>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - instant access to the key terms you’ll need to know for the exam</li>
  <li>Bonus Appendix - provides additional information about JavaScript with Nashorn, and 
enables you to test your knowledge and understanding of this topic.</li>
</ul>

<p>The exam lasted 150 minutes. At the end of the exam I still haven’t 
answered on the two questions. I can say that the exam was much more 
difficult than the <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>.</p>

<p>After receiving the email that my exam results were available I browsed to 
the <strong>CertView</strong> and it appeared that I scored <code>83%</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Associate Java SE 8 Programmer 1Z0-808 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/"/>
    <updated>2016-05-15T12:01:32+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review</id>
    <content type="html"><![CDATA[<p>After successfully passed <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
I would like to share my thoughts about the preparation and the exam.</p>

<p>I passed the exam and earn the 
<a href="https://www.youracclaim.com/badges/58fa8011-f1da-4a68-846c-b869ee04012b/public_url">badge</a> 
on Dec 2015 - so almost half year ago (since writing this post). 
Before preparation I was playing already with <code>java 8</code> a little. 
I have written two, maybe three applications which were using some 
new hot features like <code>lambda</code>, <code>default methods</code> and <code>streams</code>.
The whole knowledge how to do this I got mainly from oracle 
tutorials like</p>

<ul>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html">Aggregate Operations</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">Default Methods</a></li>
</ul>

<p>In spite of my experience as a java programmer I decided to spend some 
time to learn more about <code>java 8</code> to ensure that I would really pass the exam.</p>

<p>My journey I have started with the book: <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It took me some time, I think one month, to go through all chapters.
The book I was mainly reading during my way to work in metro, bus or tram.
I can say that I was enjoying reading it though I have already known 
most of the knowledge. It is written with a very simple language. I can say
that this book could be understandable by peoples who speak english in an 
intermediate level. It covers all the topics which can appear on 
an exam. After finishing it I bought the voucher on an exam, taking place 
a week later. I had one whole week to play around <code>java 8</code>, make some
tests and review things read in a book. To practice tests I used 
<a href="https://sybextestbanks.wiley.com/public/">sybex</a> platform. In order to 
get an access to this platform you only need to own a book.</p>

<p>On a site you can find 345 test questions divided into 3 sets</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (145) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test
Platform also provides an access to 2 other study tools</li>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - an instant access to the key terms you’ll need to know for the exam</li>
</ul>

<p>The day before the exam I decided to go sleep early. 
The exam lasted 150 minutes, and I had enough time to
answer on all the questions. They weren’t difficult. I can say
that the questions in a mockup exam from sybex were much harder. For example
if the question was a multiple choice question, in a real exam 
I was informed how many answers I needed to choose, 
in a mockup exam I weren’t.</p>

<p>One hour after the exam I received an email that my exam results were available. 
My score was <code>97%</code>. Regarding the response from <code>Oracle</code> 
I made mistakes in a questions from the following exam objectives:</p>

<ul>
  <li>Define the scope of variables</li>
  <li>Manipulate data using the StringBuilder class and methods</li>
</ul>

<p>It could sound strange that the experienced java developer made 
mistakes from the such basic topics. But believe me that the real 
intention of authors of the test is to trick you in an unexpected way. 
The question could seem to be about let’s say lambda syntax, but in real
it tests your knowledge about variable scoping. During taking tests you 
need to be very careful and stay focused all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim for Programmers - Folding]]></title>
    <link href="http://ssledz.github.io/blog/2016/02/17/vim-for-programmers-folding/"/>
    <updated>2016-02-17T00:33:05+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/02/17/vim-for-programmers-folding</id>
    <content type="html"><![CDATA[<p>This is a first post in a series of how <strong>Vim</strong> can make programmer’s life easier. <strong>Vim</strong> strikes a nice compromise between
simple editor and monolithic <strong>IDEs</strong>. I find this tool very helpful during my day to day developers tasks. I don’t
treat it as a replacement for my favorite <strong>IDE</strong> but rather as a supporting tool. In this post I would like to
introduce folding - very nice and useful feature.</p>

<h3 id="folding">Folding</h3>
<p>Folding lets you define which parts of the file you can see. For example in a method you can hide everything inside
curly braces letting only definition of function be visible.</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding1.png" /></p>

<p>When you use fold command, <strong>Vim</strong> hides given text and leaves in its place a one-line placeholder. The hidden text now
can be managed by this placeholder. In a screenshot above, you can spot four folded methods~(there are four one-line
placeholders). The first one - <em>fibonacci</em>, consists of 15 rows, takes an int as a parameter and returns a long.
There is no limit on how many folds you can create. You can even create folds within folds~(nested folds).</p>

<p><strong>Vim</strong> offers six ways to create folds:</p>

<ul>
  <li>manual - using <strong>Vim</strong> commands</li>
  <li>indent - corresponding to the text indentation</li>
  <li>expr - define folds with regular expressions</li>
  <li>syntax - based on the file’s language syntax</li>
  <li>diff - a difference between two files define folds</li>
  <li>marker</li>
</ul>

<h3 id="the-fold-commands">The fold commands</h3>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>zA</strong></td>
      <td>Toggle the state of folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zC</strong></td>
      <td>Close folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zD</strong></td>
      <td>Delete folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zO</strong></td>
      <td>Open folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zE</strong></td>
      <td>Eliminate all folds</td>
    </tr>
    <tr>
      <td><strong>zf</strong></td>
      <td>Create a fold from the current line to the one where the following motion command takes a cursor</td>
    </tr>
    <tr>
      <td>count<strong>zF</strong></td>
      <td>Create a fold covering <em>count</em> lines, starting with the current line</td>
    </tr>
    <tr>
      <td><strong>zM</strong></td>
      <td>Set option <em>foldlevel</em> to 0</td>
    </tr>
    <tr>
      <td><strong>zN</strong>, <strong>zn</strong></td>
      <td>Set (zN) or reset (zn) the <em>foldenable</em> option</td>
    </tr>
    <tr>
      <td><strong>za</strong></td>
      <td>Toggle the state of one fold</td>
    </tr>
    <tr>
      <td><strong>zc</strong></td>
      <td>Close one fold</td>
    </tr>
    <tr>
      <td><strong>zd</strong></td>
      <td>Delete one fold</td>
    </tr>
    <tr>
      <td><strong>zi</strong></td>
      <td>Toggle the value of the <em>foldenable</em> option</td>
    </tr>
    <tr>
      <td><strong>zj</strong> ,<strong>zk</strong></td>
      <td>Move cursor to the start (zj) of the fold or to the end (zk) of the previous fold</td>
    </tr>
    <tr>
      <td><strong>zm</strong>, <strong>zr</strong></td>
      <td>Decrement (zm) or increment (zr) the value of the <em>foldlevel</em> option by one</td>
    </tr>
    <tr>
      <td><strong>zo</strong></td>
      <td>Open one fold</td>
    </tr>
  </tbody>
</table>

<h3 id="manual-folding">Manual folding</h3>

<p>Suppose we want to hide 3 lines of the if statement in a fold</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>To do this just move cursor to the beginning of <code>if</code> statement and execute:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="mi">3</span><span class="n">zf</span>
</span></code></pre></td></tr></table></div></figure>

<p>The result should be similar to the one shown below</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding2.png" /></p>

<p>Let’s try more sofisticated command - fold block of code. Position the cursor over the beginning or ending brace of a
block of code and type:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">zf</span><span class="o">%</span>
</span></code></pre></td></tr></table></div></figure>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding3.png" /></p>

<p>There is a one thing to note. Character following <code>zf</code> command - <code>%</code> is a motion command that moves cursor to the matching brace.</p>

<p>To learn more about folding and generally about vim, I recommend to read <a href="https://www.goodreads.com/book/show/27390007-learning-the-vi-and-vim-editors-7-e?from_search=true&amp;search_version=service">Learning the Vi and Vim Editors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write to an HFS+ USB Drive From a Synology NAS]]></title>
    <link href="http://ssledz.github.io/blog/2016/01/10/write-to-an-hfs-plus-usb-drive-from-a-synology-nas/"/>
    <updated>2016-01-10T13:49:39+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/01/10/write-to-an-hfs-plus-usb-drive-from-a-synology-nas</id>
    <content type="html"><![CDATA[<p>It is realy annoying that the newest version of Synolgy DSM (<code>5.2-5644 Update 1</code>) can’t handle properly <code>hfs+</code> hard drive device out of the box. Thanks to the fact that many users had the same problems as me before I found realy quickly handy article which shows how to make easy workaround. The trick is to disable journaling on the drive and then try to remount the device in nas with <code>ro</code> flag switched off.</p>

<p>So to be able to write to an <code>HSF+</code> USB drvie you need first</p>

<ul>
  <li>disable journaling on the drive</li>
  <li>connect your drive to nas</li>
  <li>remount device with <code>ro</code> flag switched off</li>
</ul>

<h3 id="disabling-journaling-in-the-drive">Disabling journaling in the drive</h3>
<p>To be able to do this you need to plug in your device to the mac (I couldn’t do this from my linux). Then to turn journaling off using <code>Disk Utility</code> do following:</p>

<ul>
  <li>open <code>Disk Utility</code> (located in <code>Applications/Utilities</code>).</li>
  <li>select the disk device to disable journaling on.</li>
  <li>choose <code>Disable Journaling</code> from the <code>File</code> menu.</li>
</ul>

<p>For someone this option could not be visible (Mac OS X 10.4 and later) then before clicking on the <code>File</code> menu press and hold <a href="http://www.macworld.co.uk/how-to/mac/what-where-option-key-mac-3462401/">Option</a> key</p>

<p>More you can find <a href="https://support.apple.com/en-us/HT204435">here</a></p>

<h3 id="remount-device-with-ro-flag-switched-off">Remount device with ro flag switched off</h3>

<p>First log in as a root to the ds. Then have a look how the drive is mounted</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount
</span><span class="line">/dev/sdq1 on /volumeUSB1/usbshare1-1 type vfat (utf8,umask=000,shortname=mixed,uid=1024,gid=100,quiet)
</span><span class="line">/dev/sdq2 on /volumeUSB1/usbshare1-2 type hfsplus (ro,force,uid=1024,gid=100,umask=000)</span></code></pre></td></tr></table></div></figure>

<p>You can spot that the drive is mounted with the <code>ro</code>(read only) flag.</p>

<p>Now unmount the drive.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; umount -f /dev/sdq2</span></code></pre></td></tr></table></div></figure>

<p>And remount so it is writable using the same info used when it was mounted automatically.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount -t hfsplus /dev/sdq2 /volumeUSB1/usbshare1-2</span></code></pre></td></tr></table></div></figure>

<p>Finally, you can notice that device is no longer mounted as read only.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount
</span><span class="line">/dev/sdq1 on /volumeUSB1/usbshare1-1 type vfat (utf8,umask=000,shortname=mixed,uid=1024,gid=100,quiet)
</span><span class="line">/dev/sdq2 on /volumeUSB1/usbshare1-2 type hfsplus (0)</span></code></pre></td></tr></table></div></figure>

<p>To prove this try.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; ls /volumeUSB1/usbshare1-2/ | grep 'sampleDir'
</span><span class="line">ds&gt; mkdir /volumeUSB1/usbshare1-2/sampleDir
</span><span class="line">ds&gt; ls /volumeUSB1/usbshare1-2/ | grep 'sampleDir'
</span><span class="line">sampleDir</span></code></pre></td></tr></table></div></figure>

<h3 id="note">Note</h3>

<p>It is very important to switch off journaling in the drive. When you remount the drive with <code>ro</code> switched off and haven’t yet disabled the journaling in the drive you won’t be able to write anything to the disk though <code>mount</code> will print that the drive is mounted as writable.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-svn Kata - First Release]]></title>
    <link href="http://ssledz.github.io/blog/2015/11/27/git-svn-kata-first-release/"/>
    <updated>2015-11-27T02:15:49+01:00</updated>
    <id>http://ssledz.github.io/blog/2015/11/27/git-svn-kata-first-release</id>
    <content type="html"><![CDATA[<p>I have just released first version of <code>git-svn</code> kata. It is good starting point for those who prefer to use git but are stuck with svn. At the moment there are only two kata, but soon will be much more. To start just clone my <a href="https://github.com/ssledz/gitsvnkata/tree/master">repo</a></p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:ssledz/gitsvnkata.git</span></code></pre></td></tr></table></div></figure>

<p>and run first one</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd kata-1-checkout-svn-project-std-layout
</span><span class="line">./start-kata.sh</span></code></pre></td></tr></table></div></figure>

<p>All solutions are available <a href="https://github.com/ssledz/gitsvnkata/tree/kata-solutions">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standford's Automata Online Course - Course Review]]></title>
    <link href="http://ssledz.github.io/blog/2015/11/14/standfords-automata-online-course-course-review/"/>
    <updated>2015-11-14T11:44:06+01:00</updated>
    <id>http://ssledz.github.io/blog/2015/11/14/standfords-automata-online-course-course-review</id>
    <content type="html"><![CDATA[<p><a href="https://class.coursera.org/automata-004">Automata course</a> was six weeks long. Before taking the course I had some prior knowledge about <code>automata</code>, <code>regular expressions</code>, <code>context free grammar</code>, <code>turing machine</code> and <code>np-completeness</code>. In my opinion most of the lectures was clear and understandable. I found it very helpful to have a quizzes during each one. They were keeping me up on the track for a whole time. After each module there was a homework consisting of some test questions. For me those homeworks were the most valuable components of the course. It helped me a lot to fully understand the materials.</p>

<p>Of course not everything was straight forward. The most dificult topic, for me, was <code>np-completeness</code>. To be honest I didn’t fully understand it. I can only guessing that it was caused by the fact that I haven’t spent as much time during study as I should. Maybe I will return to that but now there are much more important things to do on top of my todo list.</p>

<p>After taking a final exam I have earned <code>Statement of Accomplishment</code> attached below.</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/coursera/automata-statement-of-accomplishment.png" /></p>
]]></content>
  </entry>
  
</feed>
