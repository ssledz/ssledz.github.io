<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puzzle | My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/blog/categories/puzzle/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2015-08-13T02:57:19+02:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Generate the Nth Fibonacci Number]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number/"/>
    <updated>2015-08-13T01:18:14+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number</id>
    <content type="html"><![CDATA[<h3>Preface</h3>

<p>Writing a method to generate the nth Fibonacci number is not a rocket science. The recursive formula for that is very simple and can be written following:
<code>
fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)
</code>
The n-th Fibonacci number is just the sum of two previous Fibonacci numbers and the first and second formula are our &lsquo;base cases&rsquo;. Based on this we can write a method <code>public static long slowFibonacci(int n)</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">have</span> <span class="n">already</span> <span class="n">noticed</span> <span class="n">that</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">writing</span> <span class="n">fibonacci</span> <span class="n">I</span> <span class="n">have</span> <span class="n">written</span> <span class="n">slowFibonacci</span><span class="o">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">a</span> <span class="n">reason</span> <span class="k">for</span> <span class="n">that</span> <span class="n">and</span> <span class="n">You</span> <span class="n">may</span> <span class="n">guessing</span> <span class="n">that</span> <span class="n">probably</span> <span class="n">we</span> <span class="n">can</span> <span class="k">do</span> <span class="n">something</span> <span class="n">with</span> <span class="k">this</span> <span class="n">method</span> <span class="n">to</span> <span class="n">make</span> <span class="n">it</span> <span class="n">much</span> <span class="n">faster</span> <span class="n">and</span> <span class="n">You</span> <span class="n">have</span> <span class="n">right</span><span class="o">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">a</span> <span class="n">quite</span> <span class="n">usful</span> <span class="n">programming</span> <span class="n">method</span> <span class="n">which</span> <span class="n">we</span> <span class="n">can</span> <span class="n">use</span> <span class="n">to</span> <span class="n">improve</span> <span class="n">the</span> <span class="n">performance</span> <span class="n">of</span> <span class="k">this</span> <span class="n">method</span><span class="o">.</span> <span class="n">However</span> <span class="n">before</span> <span class="n">doing</span> <span class="k">this</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">try</span> <span class="n">to</span> <span class="n">write</span> <span class="n">a</span> <span class="n">method</span> <span class="n">call</span> <span class="n">stack</span> <span class="n">trace</span> <span class="k">for</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">say</span> <span class="mi">5</span><span class="n">th</span> <span class="n">Fibonacci</span> <span class="n">number</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>
The number of dashes means how many delayed operations is on the stack. Dash followed by the &lsquo;>&rsquo; (&lsquo;->&rsquo;) means that the operation can be computed (return value is provided) and removed from the stack.</p>

<p>You can notice that the same operations are evaluated many times, for example <code>slowFibonacci(2)</code> is computed 3 times. It is obvious waste of cpu resources. What can we do to use previously computed value instead of evaluating it again and again ?</p>

<h3>Dynamic programming</h3>

<p>&lsquo;Dynamic programming&rsquo; method comes to our rescue. According to the wiki, &lsquo;dynamic programming&rsquo; is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems and optimal substructure. The dynamic programming approach seeks to solve each subproblem only once, thus reducing the number of computations: once the solution to a given subproblem has been computed, it is stored or &ldquo;memoized&rdquo;: the next time the same solution is needed, it is simply looked up.</p>

<p>What does it mean for us ? Each already solved subproblem (computed i-th Fibonacci number) can be saved in the let&rsquo;s say global array and if the same solution is needed just simply look for it in that table.</p>

<h3>Coding</h3>

<pre><code class="java">public class Fibonacci {

    private static long[] FIB = new long[100];

    public static long fibonacci(int n) {

        if (n == 0 || n == 1) {
            return n;
        }

        if (FIB[n] != 0) {
            return FIB[n];
        }

        FIB[n] = fibonacci(n - 1) + fibonacci(n - 2);

        return FIB[n];

    }

    public static long slowFibonacci(int n) {

        if (n == 0 || n == 1) {
            return n;
        }

        return slowFibonacci(n - 1) + slowFibonacci(n - 2);

    }

}
</code></pre>

<p>Call stack trace for this tuned method is following
<code>
fibonacci(5)
-fibonacci(4)
--fibonacci(3)
---fibonacci(2)
----fibonacci(1) -&gt; 1
----fibonacci(0) -&gt; 0
---fibonacci(2) -&gt; 1
---fibonacci(1) -&gt; 1
--fibonacci(3) -&gt; 2
--fibonacci(2) -&gt; 2
-fibonacci(4) -&gt; 3
-fibonacci(3) -&gt; 2
fibonacci(5) -&gt; 5
</code>
You can notice that the number of calls is much smaller then for <code>slowFibonacci(5)</code>.</p>

<p>At the end I would like to present a simple benchmark
<code>
fibonacci(45) = 1134903170
Duration: 0,002000s
fibonacci(60) = 1548008755920
Duration: 0,000000s
slowFibonacci(45) = 1134903170
Duration: 7,893000s
</code>
To compute 45-th Fibonacci number for <code>fibonacci</code> it takes 2ms and for <code>slowFibonacci</code> it takes 7.8s so a savings are significant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method That Return All Subsets of a Set]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set/"/>
    <updated>2015-08-09T21:52:26+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>Write a method <code>public static Set&lt;Set&lt;String&gt;&gt; subsets(Set&lt;String&gt; set)</code> which returns all subsets of a given set. From mathematics point of view we need to compute the power set of the given set. The number of such subsets can be easily computed because it just 2 to the power of &lsquo;number of element in a set&rsquo;. So for a set consisting of <code>3</code> elements it is 8.  To proceed let&rsquo;s write some examples.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span>
</span><span class='line'><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span>
</span><span class='line'><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span>
</span><span class='line'><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span>
</span><span class='line'><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">subsets</span><span class="o">({&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;})</span> <span class="o">=</span> <span class="o">{}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span> <span class="o">+</span> <span class="o">{&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Based on that we can notice a following pattern
<code>
subset('a')            = {}, {'a'}
subset('b')            = {}, {'b'}
subset('c')            = {}, {'c'}
subsets({'b','c'})     = subset({'b'}) + subset({'c'}) + {'b','c'}
subsets({'a','c'})     = subset({'a'}) + subset({'c'}) + {'a','c'}
subsets({'a','b'})     = subset({'a'}) + subset({'b'}) + {'a','b'}
subsets({'a','b','c'}) = subsets({'b','c'}) + subsets({'a','c'}) + subsets({'a','b'}) + {'a','b','c'}
</code></p>

<h3>Coding</h3>

<pre><code class="java">    public static Set&lt;Set&lt;String&gt;&gt; subsets(Set&lt;String&gt; set) {

        if (set.size() == 1) {
            Set&lt;Set&lt;String&gt;&gt; ret = new HashSet&lt;&gt;();
            ret.add(new HashSet&lt;&gt;());
            ret.add(new HashSet&lt;&gt;(set));
            return ret;
        }

        Set&lt;Set&lt;String&gt;&gt; ret = new HashSet&lt;&gt;();
        ret.add(set);

        for (String e : set) {

            Set&lt;String&gt; newSet = new HashSet&lt;&gt;(set);
            newSet.remove(e);
            Set&lt;Set&lt;String&gt;&gt; subsets = subsets(newSet);
            ret.addAll(subsets);

        }
        return ret;

    }
</code></pre>

<pre><code>    public static void main(String[] args) {
        Set&lt;String&gt; set  = new HashSet&lt;&gt;(Arrays.asList("a", "b", "c", "d"));

        Set&lt;Set&lt;String&gt;&gt; subs = subsets(set);
        System.out.println("size: " + subs.size());
        for(Set&lt;String&gt; sub : subs) {
            System.out.println(sub.toString());
        }
    }
</code></pre>

<pre><code>size: 16
[]
[a]
[b]
[c]
[a, b]
[d]
[a, c]
[b, c]
[a, d]
[b, d]
[a, b, c]
[c, d]
[a, b, d]
[a, c, d]
[b, c, d]
[a, b, c, d]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Reverse a String Using Recursion]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion/"/>
    <updated>2015-08-09T20:25:16+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>I bet that everyone who is reading this know how to write a method to revers the string, but does everyone know how to do it using recursion ? To face such puzzle it it always a good idea to write first some results for given arguments and try to find a pattern. There always must be a &lsquo;base case&rsquo; which can&rsquo;t be divided into subproblems. We also need to discover a procedure which solves bigger problem using its smaller subproblems.</p>

<p>So let&rsquo;s say we need to write a method <code>public static String revers(String arg)</code> which for a given argument returns a reversed string. Below I have written some examples.
<code>
revers('a')     = 'a'
revers('ab')    = 'ba'
revers('abc')   = 'cba'
revers('abcd')  = 'dcba'
revers('abcde') = 'edcba'
</code>
Based on that we can already write a recursive procedure.
<code>
revers('a')     = 'a'
revers('ab')    = 'b'|revers('a')
revers('abc')   = 'c'|revers('ab')
revers('abcd')  = 'd'|revers('abc')
revers('abcde') = 'e'|revers('abcd')
</code>
To compute a reversed string for <code>'a'</code> we need to return that string and it is our &lsquo;base case&rsquo;. In other cases to compute a reversed string we need to get the last char and concatenate it with the reversed string without that last character.</p>

<p>I think we are ready to write some code.</p>

<h3>Coding</h3>

<pre><code class="java">    public static String revers(String arg) {

        if (arg.length() == 1) {
            return arg;
        }
        return arg.charAt(arg.length() - 1) + revers(arg.substring(0, arg.length() - 1));

    }
</code></pre>

<pre><code class="java">    public static void main(String[] args) {
        System.out.println(revers("a"));
        System.out.println(revers("ab"));
        System.out.println(revers("abc"));
        System.out.println(revers("abcd"));
        System.out.println(revers("abcde"));
    }
</code></pre>

<pre><code>a
ba
cba
dcba
edcba
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Compute All Permutations of a String]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/08/puzzle-write-a-method-to-compute-all-permutations-of-a-string/"/>
    <updated>2015-08-08T21:06:54+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/08/puzzle-write-a-method-to-compute-all-permutations-of-a-string</id>
    <content type="html"><![CDATA[<h3>How to Approche</h3>

<p>When we hear a problem beginning with: &lsquo;Write a method to compute all&hellip;&rsquo;, it is often a good candidate for recursion. By definition recursive solutions are built of solving subproblems. Simply speaking when we need to compute <code>f(n)</code>, we need first to solve a problem for <code>f(n-1)</code>, to solve the problem for <code>f(n-1)</code> we need to do the same for <code>f(n-2)</code> and so on. Always at the end we need to face so called &lsquo;base case&rsquo; - <code>f(0)</code> or <code>f(1)</code>, which is the most easiest subproblem. Good news is that for this problem we know a solution and  many times it is just a hard coded value.</p>

<h4>Problem</h4>

<p>Our task is to write a function <code>List&lt;String&gt;perm(String str)</code> which will return all permutations of a string given in the argument. To proceed let&rsquo;s think how this problem can be splitted into smaller subproblems and how to connect those problems in the recursive way.</p>

<p>To find a pattern we will write all permutations of following strings <code>'a'</code>, <code>'b'</code>, <code>'c'</code>, <code>'ab'</code>, <code>'ac'</code>, <code>'bc'</code>, <code>'abc'</code>
<code>
perm('a')   = 'a'
perm('b')   = 'b'
perm('c')   = 'c'
perm('ab')  = 'ab', 'ba'
perm('ac')  = 'ac', 'ca'
perm('bc')  = 'bc', 'cb'
perm('abc') = 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'
</code></p>

<p>If You have some experience in solving such puzzles You probably noticed a following pattern</p>

<pre><code>perm('a')   = 'a'
perm('b')   = 'b'
perm('c')   = 'c'
perm('ab')  = 'a'|perm('b')  + 'b'|perm('a')
perm('ac')  = 'a'|perm('c')  + 'c'|perm('a')
perm('bc')  = 'b'|perm('c')  + 'c'|perm('b')
perm('abc') = 'a'|perm('bc') + 'b'|perm('ac') + 'c'|perm('ab')
</code></pre>

<p>where <code>|</code> means a concatenation of two strings.</p>

<p>First three cases are called &lsquo;base cases&rsquo; and as I mentioned before they can be easily solved. A permutation of a string containing one character is just the same string. At this point of analysis we can now try to write a small program which will solve our problem.</p>

<h3>Coding</h3>

<pre><code class="java">    public static List&lt;String&gt; permute(String str) {

        if (str.length() == 1) {
            List&lt;String&gt; ret = new LinkedList&lt;&gt;();
            ret.add(str);
            return ret;
        }

        List&lt;String&gt; permutations = new LinkedList&lt;&gt;();

        for (int i = 0; i &lt; str.length(); i++) {
            String left = "" + str.charAt(i);
            StringBuilder subStr = new StringBuilder(str);
            subStr.deleteCharAt(i);

            List&lt;String&gt; subPermutations = permute(subStr.toString());

            for (String perm : subPermutations) {
                permutations.add(left + perm);
            }

        }

        return permutations;

    }
</code></pre>

<pre><code class="java">    public static void main(String[] args) {

        List&lt;String&gt; permutations = permute("abc");
        System.out.println(String.format("permutations size: %d", permutations.size()));
        for (String perm : permutations) {
            System.out.println(perm);
        }
    }
</code></pre>

<pre><code>permutations size: 6
abc
acb
bac
bca
cab
cba
</code></pre>
]]></content>
  </entry>
  
</feed>
