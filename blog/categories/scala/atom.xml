<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2017-01-04T14:55:42+01:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Sbt Setup for Spark Project]]></title>
    <link href="http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project/"/>
    <updated>2017-01-04T13:03:14+01:00</updated>
    <id>http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project</id>
    <content type="html"><![CDATA[<p>Below can be found a simple sbt setup for a spark application in scala.</p>

<p>Directory layout</p>

<p>```
find .
.
./build.sbt
./src/main
./src/main/scala
./src/main/scala/pl
./src/main/scala/pl/softech
./src/main/scala/pl/softech/WordCountExample.scala
./src/main/resources
./src/main/resources/log4j.properties
./src/main/resources/words.txt</p>

<p>```</p>

<p>build.sbt
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name := “spark-simple-app”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;version := “1.0”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;scalaVersion := “2.11.8”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;val sparkVersion = “2.1.0”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;libraryDependencies += “org.apache.spark” %% “spark-core” % sparkVersion</span></code></pre></td></tr></table></div></figure></p>

<p>log4j.properties
<code>
log4j.rootCategory=ERROR, console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n
</code></p>

<p>WordCountExample.scala
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package pl.softech&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;import org.apache.spark.{SparkConf, SparkContext}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;object WordCountExample {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def main(args: Array[String]) {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;val conf = new SparkConf().setAppName("spark-simple-app").setMaster("local[*]")
</span><span class='line'>
</span><span class='line'>val sc = new SparkContext(conf)
</span><span class='line'>
</span><span class='line'>val textFile = sc.textFile("src/main/resources/words.txt")
</span><span class='line'>
</span><span class='line'>val counts = textFile.flatMap(line =&gt; line.split(" "))
</span><span class='line'>  .map(word =&gt; (word, 1))
</span><span class='line'>  .reduceByKey(_ + _)
</span><span class='line'>  .sortBy(-_._2)
</span><span class='line'>
</span><span class='line'>printf(counts.collect().mkString("\n"))
</span><span class='line'>
</span><span class='line'>sc.stop()   }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p>Sources can be found <a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/spark-simple-template">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Scala - My Insights]]></title>
    <link href="http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights/"/>
    <updated>2016-11-08T13:32:38+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights</id>
    <content type="html"><![CDATA[<p>It passed almost 5 months since I have been learning <em>Scala</em> programming language. This learning is a part of bigger 
path which I decided to go through to be more familiar with current trends in <em>big data</em>, <em>machine learning</em> and 
<em>cloud computing</em>.</p>

<p>When I decided to start learning scala the first question coming into my mind was how to start ?</p>

<p>Because I am rather a fun of books, I bought one - <strong>“Programming Scala: Scalability = Functional Programming + Objects” 
by Dean Wampler and Alex Payne”</strong> and started reading…. but this was not a good idea. The book I have chosen was 
written in not an easy going style and I think was too hard for the beginning. After few hundreds of pages I felt lost.
At the same time on <em>coursera</em> <strong>‘Functional Programming Principles in Scala’</strong> course was reactivated.
Not thinking too much I signed in and started participating. After few weeks I earn a certificate of accomplishment 
but this was not an end of my journey. I started participating in another course 
<strong>“Functional Program Design in Scala”</strong> from the same author (Martin Odersky) as the previous one. In parallel I have 
started reading a book <strong>“Programming in Scala Second Edition” by Martin Odersky, Lex Spoon, Bill Venners</strong> 
and I found it very helpful. Currently (in the time of writing this post) I have done <strong>“Parallel programming”</strong> 
course and already enrolled for a <strong>“Big Data Analysis with Scala and Spark”</strong> (still waiting for course publishing)</p>

<p>I think the knowledge I acquired, thanks to those courses and book, is sufficient to start writing and reading programs
 in scala. Of course it takes some time to be as proficient as in java but I am little closer to this target each day.</p>

<h3 id="resources">Resources</h3>
<p>The aim of this section is to gather the valuable resources regarding scala.</p>

<p><strong>Online courses</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ul>

<p><strong>Books</strong></p>

<ul>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.goodreads.com/book/show/11335855-scala-for-the-impatient">Scala for the Impatient</a></li>
  <li><a href="https://www.goodreads.com/book/show/22491889-programming-scala">Programming Scala: Scalability = Functional Programming + Objects</a></li>
</ul>

<p><strong>Cheat sheets</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/BDqfw/cheat-sheet">Scala cheat sheet</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/H8MtC/reactive-cheat-sheet">Scala reactive cheat sheet</a></li>
  <li><a href="http://docs.scala-lang.org/cheatsheets/">Scala cheat sheet from scala-lang.org</a></li>
  <li><a href="https://gist.github.com/ssledz/c1c1ae9b9401d8c2455ae01d9045b2d5">Scala cheat sheet written by me</a></li>
</ul>

<p><strong>Tutorials</strong></p>

<ul>
  <li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf">Scala By Example</a></li>
  <li><a href="https://twitter.github.io/scala_school/index.html">Scala School</a></li>
  <li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html">Tour of scala</a></li>
</ul>

<p><strong>Libs</strong></p>

<ul>
  <li><a href="https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md">Scalacheck</a></li>
  <li><a href="https://scalameter.github.io/">ScalaMeter</a></li>
  <li><a href="http://akka.io/docs/">Akka</a></li>
</ul>

<p><strong>Other</strong></p>

<ul>
  <li><a href="http://stackoverflow.com/tags/scala/info">scala on stackoverflow</a></li>
</ul>

<h3 id="first-steps">First steps</h3>
<p>My recommendation about ordering of going through the resources for beginners:</p>

<ol>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Scala - Writing Function : Flatten]]></title>
    <link href="http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten/"/>
    <updated>2016-07-25T00:25:57+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten</id>
    <content type="html"><![CDATA[<p>Few weeks ago since now :) I started participating in a course <strong>‘Functional Programming Principles in Scala’</strong> by 
<strong>Martin Odersky</strong>. I have already completed 4 weeks (course consists of 6 weeks) and I can tell honestly that this is 
the best course I’ve ever been doing.</p>

<p>My knowledge about scala is still increasing !</p>

<p>Below you can find a sample of what I can now do. The problem is to implement function
<code>flatten(xs: List[Any]): List[Any]</code> which takes a list of anything an tries to flatten it. For example</p>

<p><code>scala
flatten(List(List(1, 1), 2, List(3, List(5, 8))))
</code></p>

<p>should return a following list</p>

<p><code>scala
List[Any] = List(1, 1, 2, 3, 5, 8)
</code></p>

<p><div><script src='https://gist.github.com/fa5227685dda83e8b895ac9578a206b6.js'></script>
<noscript><pre><code>/**
  * Created by ssledz on 25.07.16.
  */
object Flatten {

  def flatten(xs: List[Any]): List[Any] = xs match {
    case List() =&gt; Nil
    case y :: ys =&gt; {
      y match {
        case z :: zs =&gt; flatten(z :: zs)
        case _ =&gt; List(y)
      }
    } ::: flatten(ys)
    case _ =&gt; List(xs)

  }

  def main(args: Array[String]) {
    List(
      flatten(List(List(1, 1), 2, List(3, List(5, 8)))),
      flatten(List(1, 2, 3)),
      flatten(List(List(1, 2), 3, List(4))),
      flatten(List(List(List(List(1, 2), 3, List(4))), List(5, 6, 7)))
    ) foreach println
  }

}</code></pre></noscript></div>
</p>

<p>At the end I would like to say <strong>‘thank you’</strong> to <strong><a href="https://www.atlassian.com/">Atlassian</a></strong> company for paying a half 
for this course !</p>
]]></content>
  </entry>
  
</feed>
