<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2017-01-25T03:59:17+01:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Pass Arrays as Parameters in Bash]]></title>
    <link href="http://ssledz.github.io/blog/2017/01/04/how-to-pass-arrays-as-parameters-in-bash/"/>
    <updated>2017-01-04T20:34:05+01:00</updated>
    <id>http://ssledz.github.io/blog/2017/01/04/how-to-pass-arrays-as-parameters-in-bash</id>
    <content type="html"><![CDATA[<p>Let’s say we have a function in bash which simply iterates through all elements from array and prints them on 
the standard output.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">printElems() {
</span><span class="line">  for e in ${arr[@]}; do 
</span><span class="line">    echo $e
</span><span class="line">  done
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>We can call this function in the following way</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr=(el1 el2 el3 el4)
</span><span class="line">printElems</span></code></pre></td></tr></table></div></figure>

<p>If we want to call function with other parameters we need to update arr variable accordingly</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr=(el1 el2 el3 el4)
</span><span class="line">printElems
</span><span class="line">arr=(el5 el6 el7 el8)</span></code></pre></td></tr></table></div></figure>

<p>So far so good. But what if we want to make our <code>printElems</code> function generic and put it to the separate file. Is
 it wise 
enough to stay with our solution to maintain <code>arr</code> variable in global scope ? The answer is - it depends on the size
 of 
the project. It is obvious that maintaining global variables is cumbersome in projects which are getting bigger and 
bigger during their lifetime. So that is there any smart way to improve our function to not pollute the global scope ?</p>

<p>The answer is yes, and in this task will help us bash feature called ‘<strong>indirect variable reference</strong>’.</p>

<p>Below is an improved version of <code>printElem</code> function. A new function (<code>printElems2</code>) is not dealing with global 
variable at
 all. In fact the function receives a variable name and thx to the indirect reference operator <code>$(!variable_name)</code>
 the value of the function parameter is set to local variable called <code>my_arr</code>.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">printElems2() {
</span><span class="line">  local my_arr=${!1}
</span><span class="line">  for e in ${my_arr[@]}; do 
</span><span class="line">    echo $e
</span><span class="line">  done
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arr1=(el1 el2 el3 el4)
</span><span class="line">arr2=(el5 el6 el7 el8)
</span><span class="line">
</span><span class="line">printElems2 arr1[@]
</span><span class="line">printElems2 arr2[@]
</span></code></pre></td></tr></table></div></figure>

<p>More information about ‘indirect variable reference’ feature you 
can find <a href="http://www.tldp.org/LDP/abs/html/ivr.html#IVRREF">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Sbt Setup for Spark Project]]></title>
    <link href="http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project/"/>
    <updated>2017-01-04T18:03:14+01:00</updated>
    <id>http://ssledz.github.io/blog/2017/01/04/simple-sbt-setup-for-spark-project</id>
    <content type="html"><![CDATA[<p>Below can be found a simple sbt setup for a spark application in scala.</p>

<p>Directory layout</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">find .
</span><span class="line">.
</span><span class="line">./build.sbt
</span><span class="line">./src/main
</span><span class="line">./src/main/scala
</span><span class="line">./src/main/scala/pl
</span><span class="line">./src/main/scala/pl/softech
</span><span class="line">./src/main/scala/pl/softech/WordCountExample.scala
</span><span class="line">./src/main/resources
</span><span class="line">./src/main/resources/log4j.properties
</span><span class="line">./src/main/resources/words.txt
</span></code></pre></td></tr></table></div></figure>

<p>build.sbt</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">name := "spark-simple-app"
</span><span class="line">
</span><span class="line">version := "1.0"
</span><span class="line">
</span><span class="line">scalaVersion := "2.11.8"
</span><span class="line">
</span><span class="line">val sparkVersion = "2.1.0"
</span><span class="line">
</span><span class="line">libraryDependencies += "org.apache.spark" %% "spark-core" % sparkVersion</span></code></pre></td></tr></table></div></figure>

<p>log4j.properties</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">log4j.rootCategory=ERROR, console
</span><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender
</span><span class="line">log4j.appender.console.target=System.err
</span><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout
</span><span class="line">log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n</span></code></pre></td></tr></table></div></figure>

<p>WordCountExample.scala</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package pl.softech
</span><span class="line">
</span><span class="line">import org.apache.spark.{SparkConf, SparkContext}
</span><span class="line">
</span><span class="line">
</span><span class="line">object WordCountExample {
</span><span class="line">
</span><span class="line">  def main(args: Array[String]) {
</span><span class="line">
</span><span class="line">    val conf = new SparkConf().setAppName("spark-simple-app").setMaster("local[*]")
</span><span class="line">
</span><span class="line">    val sc = new SparkContext(conf)
</span><span class="line">
</span><span class="line">    val textFile = sc.textFile("src/main/resources/words.txt")
</span><span class="line">
</span><span class="line">    val counts = textFile.flatMap(line =&gt; line.split(" "))
</span><span class="line">      .map(word =&gt; (word, 1))
</span><span class="line">      .reduceByKey(_ + _)
</span><span class="line">      .sortBy(-_._2)
</span><span class="line">
</span><span class="line">    printf(counts.collect().mkString("\n"))
</span><span class="line">
</span><span class="line">    sc.stop()
</span><span class="line">  }
</span><span class="line">
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>Sources can be found <a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/spark-simple-template">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Scala - My Insights]]></title>
    <link href="http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights/"/>
    <updated>2016-11-08T13:32:38+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/11/08/learning-scala-my-insights</id>
    <content type="html"><![CDATA[<p>It passed almost 5 months since I have been learning <em>Scala</em> programming language. This learning is a part of bigger 
path which I decided to go through to be more familiar with current trends in <em>big data</em>, <em>machine learning</em> and 
<em>cloud computing</em>.</p>

<p>When I decided to start learning scala the first question coming into my mind was how to start ?</p>

<p>Because I am rather a fun of books, I bought one - <strong>“Programming Scala: Scalability = Functional Programming + Objects” 
by Dean Wampler and Alex Payne”</strong> and started reading…. but this was not a good idea. The book I have chosen was 
written in not an easy going style and I think was too hard for the beginning. After few hundreds of pages I felt lost.
At the same time on <em>coursera</em> <strong>‘Functional Programming Principles in Scala’</strong> course was reactivated.
Not thinking too much I signed in and started participating. After few weeks I earn a certificate of accomplishment 
but this was not an end of my journey. I started participating in another course 
<strong>“Functional Program Design in Scala”</strong> from the same author (Martin Odersky) as the previous one. In parallel I have 
started reading a book <strong>“Programming in Scala Second Edition” by Martin Odersky, Lex Spoon, Bill Venners</strong> 
and I found it very helpful. Currently (in the time of writing this post) I have done <strong>“Parallel programming”</strong> 
course and already enrolled for a <strong>“Big Data Analysis with Scala and Spark”</strong> (still waiting for course publishing)</p>

<p>I think the knowledge I acquired, thanks to those courses and book, is sufficient to start writing and reading programs
 in scala. Of course it takes some time to be as proficient as in java but I am little closer to this target each day.</p>

<h3 id="resources">Resources</h3>
<p>The aim of this section is to gather the valuable resources regarding scala.</p>

<p><strong>Online courses</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ul>

<p><strong>Books</strong></p>

<ul>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.goodreads.com/book/show/11335855-scala-for-the-impatient">Scala for the Impatient</a></li>
  <li><a href="https://www.goodreads.com/book/show/22491889-programming-scala">Programming Scala: Scalability = Functional Programming + Objects</a></li>
</ul>

<p><strong>Cheat sheets</strong></p>

<ul>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/BDqfw/cheat-sheet">Scala cheat sheet</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2/supplement/H8MtC/reactive-cheat-sheet">Scala reactive cheat sheet</a></li>
  <li><a href="http://docs.scala-lang.org/cheatsheets/">Scala cheat sheet from scala-lang.org</a></li>
  <li><a href="https://gist.github.com/ssledz/c1c1ae9b9401d8c2455ae01d9045b2d5">Scala cheat sheet written by me</a></li>
</ul>

<p><strong>Tutorials</strong></p>

<ul>
  <li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf">Scala By Example</a></li>
  <li><a href="https://twitter.github.io/scala_school/index.html">Scala School</a></li>
  <li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html">Tour of scala</a></li>
</ul>

<p><strong>Libs</strong></p>

<ul>
  <li><a href="https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md">Scalacheck</a></li>
  <li><a href="https://scalameter.github.io/">ScalaMeter</a></li>
  <li><a href="http://akka.io/docs/">Akka</a></li>
</ul>

<p><strong>Other</strong></p>

<ul>
  <li><a href="http://stackoverflow.com/tags/scala/info">scala on stackoverflow</a></li>
</ul>

<h3 id="first-steps">First steps</h3>
<p>My recommendation about ordering of going through the resources for beginners:</p>

<ol>
  <li><a href="https://www.coursera.org/learn/progfun1">Functional Programming Principles in Scala</a></li>
  <li><a href="http://www.goodreads.com/book/show/5680904-programming-in-scala">Programming in Scala by Martin Odersky, Lex Spoon, Bill Venners</a></li>
  <li><a href="https://www.coursera.org/learn/progfun2">Functional Program Design in Scala</a></li>
  <li><a href="https://www.coursera.org/learn/parprog1">Parallel programming</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Scala - Writing Function : Flatten]]></title>
    <link href="http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten/"/>
    <updated>2016-07-25T00:25:57+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten</id>
    <content type="html"><![CDATA[<p>Few weeks ago since now :) I started participating in a course <strong>‘Functional Programming Principles in Scala’</strong> by 
<strong>Martin Odersky</strong>. I have already completed 4 weeks (course consists of 6 weeks) and I can tell honestly that this is 
the best course I’ve ever been doing.</p>

<p>My knowledge about scala is still increasing !</p>

<p>Below you can find a sample of what I can now do. The problem is to implement function
<code>flatten(xs: List[Any]): List[Any]</code> which takes a list of anything an tries to flatten it. For example</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">flatten</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="mi">2</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">))))</span>
</span></code></pre></td></tr></table></div></figure>

<p>should return a following list</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="nc">List</span><span class="o">[</span><span class="kt">Any</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<div><script src="https://gist.github.com/fa5227685dda83e8b895ac9578a206b6.js"></script>
<noscript><pre><code>/**
  * Created by ssledz on 25.07.16.
  */
object Flatten {

  def flatten(xs: List[Any]): List[Any] = xs match {
    case List() =&gt; Nil
    case y :: ys =&gt; {
      y match {
        case z: List[Any] =&gt; flatten(z)
        case _ =&gt; List(y)
      }
    } ::: flatten(ys)
    case _ =&gt; List(xs)

  }

  def main(args: Array[String]) {
    List(
      flatten(List(List(1, 1), 2, List(3, List(5, 8)))),
      flatten(List(1, 2, 3)),
      flatten(List(List(1, 2), 3, List(4))),
      flatten(List(List(List(List(1, 2), 3, List(4))), List(5, 6, 7)))
    ) foreach println
  }

}</code></pre></noscript></div>

<p>At the end I would like to say <strong>‘thank you’</strong> to <strong><a href="https://www.atlassian.com/">Atlassian</a></strong> company for paying a half 
for this course !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto Going Back to the Beginning of the Line in Tmux After Remapping Prefix to C-a]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/23/howto-going-back-to-the-beginning-of-the-line-in-tmux-after-remapping-prefix-to-c-a/"/>
    <updated>2016-05-23T02:05:54+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/23/howto-going-back-to-the-beginning-of-the-line-in-tmux-after-remapping-prefix-to-c-a</id>
    <content type="html"><![CDATA[<p><code>tmux</code> is a great tool. I have been using it since I think half year. 
Before I used to use <code>screen</code>, but only to manage my remote shells. Now I am using <code>tmux</code> for
local and remote shell management.</p>

<p>In order to make a switch from <code>screen</code> to <code>tmux</code> smooth 
I decided to remap default binding for <em>prefix</em> from <em>C-b</em> to <em>C-a</em> (like in screen). This caused
that one of my favorite shortcuts - <code>C-a</code> for going back to the beginning of the line, 
stopped working.</p>

<p>Recently I have discovered that making:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind C-a send-prefix</span></code></pre></td></tr></table></div></figure>

<p>binds the shortcut to this sequence <code>C-a C-a</code> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hot Swap in Java With DCEVM and HotSwapAgent - a JRebel Free Alternative]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative/"/>
    <updated>2016-05-16T22:38:40+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/16/hot-swap-in-java-with-dcevm-and-hotswapagent-a-jrebel-free-alternative</id>
    <content type="html"><![CDATA[<p>Reloading a bytecode in a virtual machine when application is running is very limited. In fact 
HotSpot(TM) VM allows only changing method bodies. To address this problem some commercial and open source tools were 
created. Among them is <em>Dynamic Code Evolution Virtual Machine</em> (<strong>DCEVM</strong>) and 
<strong>HotSwapAgent</strong> - very promising open source tool.</p>

<p>I have already some experience in using <strong>DCEVM</strong>. Some times ago I have been working for an insurance company where 
I was using this modified vm to develop a code in a gosu language. <a href="https://gosu-lang.github.io/">Gosu</a> is another 
JVM language. I remember that then hot swapping worked very well.</p>

<p>Let’s try this tool. First we need to patch our current jvm.</p>

<h3 id="installing-dynamic-code-evolution-vm">Installing Dynamic Code Evolution VM</h3>

<p>In order to enhance current Java (JRE/JDK) installations with <strong>DCEVM</strong>
you need to download the latest <a href="https://dcevm.github.io/">release</a> 
of <strong>DCEVM</strong> installer for a given major java version,</p>

<blockquote>
  <p><code>java 7</code> and <code>java 8</code> are supported</p>
</blockquote>

<p>run the installer</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -jar DCEVM-light-8u74-installer.jar</span></code></pre></td></tr></table></div></figure>

<p>then select a proper java installation directory on your disc and press <em>Install DCEVM as altjvm</em></p>

<p><img class="center" src="http://ssledz.github.io/images/custom/dcevm-installer.png" /></p>

<p>That’s all really. Very simple isn’t it ?</p>

<p>To validate the installation run:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -version</span></code></pre></td></tr></table></div></figure>

<p>and if everything went alright you should see something similar to below
output:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java version "1.8.0_91"
</span><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
</span><span class="line">Dynamic Code Evolution 64-Bit Server VM (build 25.71-b01-dcevmlight-10, mixed mode)</span></code></pre></td></tr></table></div></figure>

<p>Note that in the third line instead of <code>Java HotSpot(TM)</code> we have 
now <code>Dynamic Code Evolution</code>.</p>

<h4 id="kind-of-installers">Kind of installers</h4>
<p>Worth noting is the fact that there are two kind of installers</p>

<ul>
  <li><em>light</em></li>
  <li>and <em>full</em></li>
</ul>

<p>The latter one supports more features (for example, it supports removal of superclasses),
but because of the maintenance issues the <em>full</em> edition is available 
for a fewer versions of jdk.</p>

<h3 id="downloading-hotswapagent">Downloading HotswapAgent</h3>

<p>HotswapAgent does the work of reloading resources and framework configuration. 
So in order to have a support for reloading a spring bean definitions just 
after a change occurs, we need to perform one more step - 
download latest release of <a href="https://github.com/HotswapProjects/HotswapAgent/releases">hotswap-agent.jar</a>
and put it anywhere. For example here: <code>~/bin/hotswap/hotswap-agent.jar</code>.</p>

<h2 id="running-application-in-order-to-test-hot-swapping">Running application in order to test hot swapping</h2>

<p>I will use <code>Main</code> and <code>Main2</code> classes to play with hot swapping:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">            <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="n">Foo</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;tick - %08d\t&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">++);</span>
</span><span class="line">        <span class="n">foo</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mainLoop</span><span class="o">();</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And the second one:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main2</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getFields</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="n">String</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">,</span> <span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;fields=%s\t methods=%s\n&quot;</span><span class="o">,</span> <span class="n">fields</span><span class="o">,</span> <span class="n">methods</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mainLoop</span><span class="o">();</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I will test following use cases:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">case</th>
      <th style="text-align: center">works ?</th>
      <th style="text-align: left">Test class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>1.</strong></td>
      <td style="text-align: left">change body method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>2.</strong></td>
      <td style="text-align: left">add method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>3.</strong></td>
      <td style="text-align: left">add field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>4.</strong></td>
      <td style="text-align: left">remove field</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
    <tr>
      <td style="text-align: left"><strong>5.</strong></td>
      <td style="text-align: left">remove method</td>
      <td style="text-align: center">YES</td>
      <td style="text-align: left">Main2</td>
    </tr>
  </tbody>
</table>

<h3 id="intellij-idea-settings">Intellij IDEA settings</h3>

<p>All tests will be performed using Intellij IDEA. Ensure that following options are set</p>

<ul>
  <li>enable <a href="https://www.jetbrains.com/help/idea/2016.1/reloading-classes.html?origin=old_help">classes reloading</a></li>
</ul>

<p><img class="center" src="http://ssledz.github.io/images/custom/idea/dcevm-hotswap-settings.png" /></p>

<ul>
  <li>pass <code>-XXaltjvm=dcevm</code> vm option to run/debug configuration</li>
</ul>

<p><img class="center" src="http://ssledz.github.io/images/custom/idea/dcevm-run-dbg-conf.png" /></p>

<h3 id="case-1--change-body-method">Case 1 : change body method</h3>

<p>Run debug. In the console you should see following output:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000000</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000000</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000001</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000001</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000002</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000002</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then change <code>counter++;</code> to <code>counter+=2;</code> in <code>Foo</code> class.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter</span><span class="o">+=</span><span class="mi">2</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile and after few seconds you should spot that the classes were reloaded successfully</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000008</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="case-2--add-method">Case 2 : add method</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add method</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tbar - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>to the <code>Foo</code> class and call it from the <code>mainLoop</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;tick - %08d\t&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">++);</span>
</span><span class="line">    <span class="n">foo</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">    <span class="n">foo</span><span class="o">.</span><span class="na">bar</span><span class="o">();</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000006</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000007</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000007</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000007</span>	<span class="n">bar</span> <span class="o">-</span> <span class="mi">00000008</span>
</span></code></pre></td></tr></table></div></figure>

<p>Classes were reloaded successfully.</p>

<h3 id="case-3--add-field">Case 3 : add field</h3>

<p>Revert all changes in <code>Main</code> class and run debug. Add field <code>int counter2</code> to <code>Foo</code> class and append following
two statements to the end of <code>foo</code> method.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tcounter2 - %08d&quot;</span><span class="o">,</span> <span class="n">counter2</span><span class="o">);</span>
</span><span class="line"><span class="n">counter2</span><span class="o">++;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Foo</code> class should look following</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">counter2</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;foo - %08d&quot;</span><span class="o">,</span> <span class="n">counter</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;\tcounter2 - %08d&quot;</span><span class="o">,</span> <span class="n">counter2</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter2</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile. And appears</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000002</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000002</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000003</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000003</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000004</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000000</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000005</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000001</span>
</span><span class="line"><span class="n">tick</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">foo</span> <span class="o">-</span> <span class="mi">00000006</span>	<span class="n">counter2</span> <span class="o">-</span> <span class="mi">00000002</span>
</span></code></pre></td></tr></table></div></figure>

<p>that this kind of change was also reloaded successfully.</p>

<h3 id="case-4--remove-field">Case 4 : remove field</h3>

<p>Run debug. In the console you should see following output:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then add two public fields <code>int number</code> and <code>String name</code> to the <code>Foo</code> class.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then remove <code>number</code> field and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">number</span><span class="o">,</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>The change was reloaded.</p>

<h3 id="case-5--remove-method">Case 5 : remove method</h3>

<p>Revert all changes in <code>Main2</code> class and run debug. Add</p>

<ul>
  <li>public field <code>String name</code></li>
  <li>public method <code>String getName()</code></li>
</ul>

<p>to the <code>Foo</code> class. Then hit <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code> to compile, and after few seconds…</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then remove <code>getName()</code> method and hit again <code>&lt;ctr&gt;+&lt;shift&gt;+&lt;F9&gt;</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[</span><span class="n">getName</span><span class="o">]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span><span class="line"><span class="n">fields</span><span class="o">=[</span><span class="n">name</span><span class="o">]</span>	 <span class="n">methods</span><span class="o">=[]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Seems that this change was also reloaded successfully.</p>

<h2 id="notes">Notes</h2>

<p>During the play with hot swapping in Intellij IDEA you could notice that for some circumstances code would not be 
reloaded. Intellij IDEA has a following limitation about which you need to be aware:</p>

<blockquote>
  <p>the old code is still used until the VM exits the obsolete stack frame</p>
</blockquote>

<p>About that you can read <a href="http://stackoverflow
.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">here</a></p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://dcevm.github.io/">DCEVM</a></li>
  <li><a href="http://www.hotswapagent.org/quick-start">HotswapAgent Quick start</a></li>
  <li><a href="https://github.com/HotswapProjects">HotswapProjects</a></li>
  <li><a href="http://stackoverflow.com/questions/32507900/hotswap-dcevm-doesnt-work-in-intellij-idea-community-version">Hotswap/DCEVM doesn’t work in Intellij IDEA (Community Version)</a></li>
  <li><a href="https://wiki.wocommunity.org/display/WOL/Using+DCEVM+and+Hotswap+for+rapid+turnaround">Using DCEVM and Hotswap for rapid turnaround</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Professional, Java SE 8 Programmer 1Z0-809 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review/"/>
    <updated>2016-05-15T19:34:09+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-professional-java-se-8-programmer-1z0-809-exam-review</id>
    <content type="html"><![CDATA[<p>Just after passing <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
(about that you can read <a href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">here</a>) 
and being impressed by <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>,
I decided to buy the newly released <a href="https://www.goodreads.com/book/show/23650477-ocp">OCP: Oracle Certified Professional Java Se 8 Programmer II Study Guide: Exam 1Z0-809</a>.
It was a really good purchase.</p>

<p>The book is awesome. It has a similar style and feel as the <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It covers many new features, in details, introduced in <code>java 8</code>.
I learn a lot about <code>lambda</code>, <code>collection streams</code>, <code>date api</code> 
and so on. I can tell you that this book was worth its money.</p>

<p>It took me almost 4 months to go through this book. To be honest I read
it two times. Same as previously (<a href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/">OCA - review</a>) 
I was generally reading the book during my way to work. 
First time I really haven’t paid attention on solving tests. 
I have just gone through the book to better know
<code>java 8</code>. After that I took a few weeks break. When I started solving
test questions I noticed that I had a problem with <code>java API</code>. It is
really annoying that the test exam requires from developer to remember
api. In 2016 we have <code>ides</code>, written mainly for this purpose. Due this
fact I started reading a book again. This time however, 
I have been solving test question just after I read a chapter.</p>

<p>In order to prepare to the final exam I used <a href="https://sybextestbanks.wiley.com/public/">sybex</a>
platform. Due the fact that I bought the book I got an access to this
site where I found 411 test questions divided into 3 sets:</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (211) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test</li>
</ul>

<p>Moreover I had an access to the following resources:</p>

<ul>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - instant access to the key terms you’ll need to know for the exam</li>
  <li>Bonus Appendix - provides additional information about JavaScript with Nashorn, and 
enables you to test your knowledge and understanding of this topic.</li>
</ul>

<p>The exam lasted 150 minutes. At the end of the exam I still haven’t 
answered on the two questions. I can say that the exam was much more 
difficult than the <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>.</p>

<p>After receiving the email that my exam results were available I browsed to 
the <strong>CertView</strong> and it appeared that I scored <code>83%</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Associate Java SE 8 Programmer 1Z0-808 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/"/>
    <updated>2016-05-15T12:01:32+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review</id>
    <content type="html"><![CDATA[<p>After successfully passed <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
I would like to share my thoughts about the preparation and the exam.</p>

<p>I passed the exam and earn the 
<a href="https://www.youracclaim.com/badges/58fa8011-f1da-4a68-846c-b869ee04012b/public_url">badge</a> 
on Dec 2015 - so almost half year ago (since writing this post). 
Before preparation I was playing already with <code>java 8</code> a little. 
I have written two, maybe three applications which were using some 
new hot features like <code>lambda</code>, <code>default methods</code> and <code>streams</code>.
The whole knowledge how to do this I got mainly from oracle 
tutorials like</p>

<ul>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html">Aggregate Operations</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">Default Methods</a></li>
</ul>

<p>In spite of my experience as a java programmer I decided to spend some 
time to learn more about <code>java 8</code> to ensure that I would really pass the exam.</p>

<p>My journey I have started with the book: <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">OCA: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It took me some time, I think one month, to go through all chapters.
The book I was mainly reading during my way to work in metro, bus or tram.
I can say that I was enjoying reading it though I have already known 
most of the knowledge. It is written with a very simple language. I can say
that this book could be understandable by peoples who speak english in an 
intermediate level. It covers all the topics which can appear on 
an exam. After finishing it I bought the voucher on an exam, taking place 
a week later. I had one whole week to play around <code>java 8</code>, make some
tests and review things read in a book. To practice tests I used 
<a href="https://sybextestbanks.wiley.com/public/">sybex</a> platform. In order to 
get an access to this platform you only need to own a book.</p>

<p>On a site you can find 345 test questions divided into 3 sets</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (145) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test
Platform also provides an access to 2 other study tools</li>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - an instant access to the key terms you’ll need to know for the exam</li>
</ul>

<p>The day before the exam I decided to go sleep early. 
The exam lasted 150 minutes, and I had enough time to
answer on all the questions. They weren’t difficult. I can say
that the questions in a mockup exam from sybex were much harder. For example
if the question was a multiple choice question, in a real exam 
I was informed how many answers I needed to choose, 
in a mockup exam I weren’t.</p>

<p>One hour after the exam I received an email that my exam results were available. 
My score was <code>97%</code>. Regarding the response from <code>Oracle</code> 
I made mistakes in a questions from the following exam objectives:</p>

<ul>
  <li>Define the scope of variables</li>
  <li>Manipulate data using the StringBuilder class and methods</li>
</ul>

<p>It could sound strange that the experienced java developer made 
mistakes from the such basic topics. But believe me that the real 
intention of authors of the test is to trick you in an unexpected way. 
The question could seem to be about let’s say lambda syntax, but in real
it tests your knowledge about variable scoping. During taking tests you 
need to be very careful and stay focused all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim for Programmers - Folding]]></title>
    <link href="http://ssledz.github.io/blog/2016/02/17/vim-for-programmers-folding/"/>
    <updated>2016-02-17T00:33:05+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/02/17/vim-for-programmers-folding</id>
    <content type="html"><![CDATA[<p>This is a first post in a series of how <strong>Vim</strong> can make programmer’s life easier. <strong>Vim</strong> strikes a nice compromise between
simple editor and monolithic <strong>IDEs</strong>. I find this tool very helpful during my day to day developers tasks. I don’t
treat it as a replacement for my favorite <strong>IDE</strong> but rather as a supporting tool. In this post I would like to
introduce folding - very nice and useful feature.</p>

<h3 id="folding">Folding</h3>
<p>Folding lets you define which parts of the file you can see. For example in a method you can hide everything inside
curly braces letting only definition of function be visible.</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding1.png" /></p>

<p>When you use fold command, <strong>Vim</strong> hides given text and leaves in its place a one-line placeholder. The hidden text now
can be managed by this placeholder. In a screenshot above, you can spot four folded methods~(there are four one-line
placeholders). The first one - <em>fibonacci</em>, consists of 15 rows, takes an int as a parameter and returns a long.
There is no limit on how many folds you can create. You can even create folds within folds~(nested folds).</p>

<p><strong>Vim</strong> offers six ways to create folds:</p>

<ul>
  <li>manual - using <strong>Vim</strong> commands</li>
  <li>indent - corresponding to the text indentation</li>
  <li>expr - define folds with regular expressions</li>
  <li>syntax - based on the file’s language syntax</li>
  <li>diff - a difference between two files define folds</li>
  <li>marker</li>
</ul>

<h3 id="the-fold-commands">The fold commands</h3>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>zA</strong></td>
      <td>Toggle the state of folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zC</strong></td>
      <td>Close folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zD</strong></td>
      <td>Delete folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zO</strong></td>
      <td>Open folds, recursively</td>
    </tr>
    <tr>
      <td><strong>zE</strong></td>
      <td>Eliminate all folds</td>
    </tr>
    <tr>
      <td><strong>zf</strong></td>
      <td>Create a fold from the current line to the one where the following motion command takes a cursor</td>
    </tr>
    <tr>
      <td>count<strong>zF</strong></td>
      <td>Create a fold covering <em>count</em> lines, starting with the current line</td>
    </tr>
    <tr>
      <td><strong>zM</strong></td>
      <td>Set option <em>foldlevel</em> to 0</td>
    </tr>
    <tr>
      <td><strong>zN</strong>, <strong>zn</strong></td>
      <td>Set (zN) or reset (zn) the <em>foldenable</em> option</td>
    </tr>
    <tr>
      <td><strong>za</strong></td>
      <td>Toggle the state of one fold</td>
    </tr>
    <tr>
      <td><strong>zc</strong></td>
      <td>Close one fold</td>
    </tr>
    <tr>
      <td><strong>zd</strong></td>
      <td>Delete one fold</td>
    </tr>
    <tr>
      <td><strong>zi</strong></td>
      <td>Toggle the value of the <em>foldenable</em> option</td>
    </tr>
    <tr>
      <td><strong>zj</strong> ,<strong>zk</strong></td>
      <td>Move cursor to the start (zj) of the fold or to the end (zk) of the previous fold</td>
    </tr>
    <tr>
      <td><strong>zm</strong>, <strong>zr</strong></td>
      <td>Decrement (zm) or increment (zr) the value of the <em>foldlevel</em> option by one</td>
    </tr>
    <tr>
      <td><strong>zo</strong></td>
      <td>Open one fold</td>
    </tr>
  </tbody>
</table>

<h3 id="manual-folding">Manual folding</h3>

<p>Suppose we want to hide 3 lines of the if statement in a fold</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>To do this just move cursor to the beginning of <code>if</code> statement and execute:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="mi">3</span><span class="n">zf</span>
</span></code></pre></td></tr></table></div></figure>

<p>The result should be similar to the one shown below</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding2.png" /></p>

<p>Let’s try more sofisticated command - fold block of code. Position the cursor over the beginning or ending brace of a
block of code and type:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">zf</span><span class="o">%</span>
</span></code></pre></td></tr></table></div></figure>

<p><img class="center" src="http://ssledz.github.io/images/custom/vim/vim-folding3.png" /></p>

<p>There is a one thing to note. Character following <code>zf</code> command - <code>%</code> is a motion command that moves cursor to the matching brace.</p>

<p>To learn more about folding and generally about vim, I recommend to read <a href="https://www.goodreads.com/book/show/27390007-learning-the-vi-and-vim-editors-7-e?from_search=true&amp;search_version=service">Learning the Vi and Vim Editors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write to an HFS+ USB Drive From a Synology NAS]]></title>
    <link href="http://ssledz.github.io/blog/2016/01/10/write-to-an-hfs-plus-usb-drive-from-a-synology-nas/"/>
    <updated>2016-01-10T13:49:39+01:00</updated>
    <id>http://ssledz.github.io/blog/2016/01/10/write-to-an-hfs-plus-usb-drive-from-a-synology-nas</id>
    <content type="html"><![CDATA[<p>It is realy annoying that the newest version of Synolgy DSM (<code>5.2-5644 Update 1</code>) can’t handle properly <code>hfs+</code> hard drive device out of the box. Thanks to the fact that many users had the same problems as me before I found realy quickly handy article which shows how to make easy workaround. The trick is to disable journaling on the drive and then try to remount the device in nas with <code>ro</code> flag switched off.</p>

<p>So to be able to write to an <code>HSF+</code> USB drvie you need first</p>

<ul>
  <li>disable journaling on the drive</li>
  <li>connect your drive to nas</li>
  <li>remount device with <code>ro</code> flag switched off</li>
</ul>

<h3 id="disabling-journaling-in-the-drive">Disabling journaling in the drive</h3>
<p>To be able to do this you need to plug in your device to the mac (I couldn’t do this from my linux). Then to turn journaling off using <code>Disk Utility</code> do following:</p>

<ul>
  <li>open <code>Disk Utility</code> (located in <code>Applications/Utilities</code>).</li>
  <li>select the disk device to disable journaling on.</li>
  <li>choose <code>Disable Journaling</code> from the <code>File</code> menu.</li>
</ul>

<p>For someone this option could not be visible (Mac OS X 10.4 and later) then before clicking on the <code>File</code> menu press and hold <a href="http://www.macworld.co.uk/how-to/mac/what-where-option-key-mac-3462401/">Option</a> key</p>

<p>More you can find <a href="https://support.apple.com/en-us/HT204435">here</a></p>

<h3 id="remount-device-with-ro-flag-switched-off">Remount device with ro flag switched off</h3>

<p>First log in as a root to the ds. Then have a look how the drive is mounted</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount
</span><span class="line">/dev/sdq1 on /volumeUSB1/usbshare1-1 type vfat (utf8,umask=000,shortname=mixed,uid=1024,gid=100,quiet)
</span><span class="line">/dev/sdq2 on /volumeUSB1/usbshare1-2 type hfsplus (ro,force,uid=1024,gid=100,umask=000)</span></code></pre></td></tr></table></div></figure>

<p>You can spot that the drive is mounted with the <code>ro</code>(read only) flag.</p>

<p>Now unmount the drive.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; umount -f /dev/sdq2</span></code></pre></td></tr></table></div></figure>

<p>And remount so it is writable using the same info used when it was mounted automatically.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount -t hfsplus /dev/sdq2 /volumeUSB1/usbshare1-2</span></code></pre></td></tr></table></div></figure>

<p>Finally, you can notice that device is no longer mounted as read only.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; mount
</span><span class="line">/dev/sdq1 on /volumeUSB1/usbshare1-1 type vfat (utf8,umask=000,shortname=mixed,uid=1024,gid=100,quiet)
</span><span class="line">/dev/sdq2 on /volumeUSB1/usbshare1-2 type hfsplus (0)</span></code></pre></td></tr></table></div></figure>

<p>To prove this try.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ds&gt; ls /volumeUSB1/usbshare1-2/ | grep 'sampleDir'
</span><span class="line">ds&gt; mkdir /volumeUSB1/usbshare1-2/sampleDir
</span><span class="line">ds&gt; ls /volumeUSB1/usbshare1-2/ | grep 'sampleDir'
</span><span class="line">sampleDir</span></code></pre></td></tr></table></div></figure>

<h3 id="note">Note</h3>

<p>It is very important to switch off journaling in the drive. When you remount the drive with <code>ro</code> switched off and haven’t yet disabled the journaling in the drive you won’t be able to write anything to the disk though <code>mount</code> will print that the drive is mounted as writable.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-svn Kata - First Release]]></title>
    <link href="http://ssledz.github.io/blog/2015/11/27/git-svn-kata-first-release/"/>
    <updated>2015-11-27T02:15:49+01:00</updated>
    <id>http://ssledz.github.io/blog/2015/11/27/git-svn-kata-first-release</id>
    <content type="html"><![CDATA[<p>I have just released first version of <code>git-svn</code> kata. It is good starting point for those who prefer to use git but are stuck with svn. At the moment there are only two kata, but soon will be much more. To start just clone my <a href="https://github.com/ssledz/gitsvnkata/tree/master">repo</a></p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:ssledz/gitsvnkata.git</span></code></pre></td></tr></table></div></figure>

<p>and run first one</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd kata-1-checkout-svn-project-std-layout
</span><span class="line">./start-kata.sh</span></code></pre></td></tr></table></div></figure>

<p>All solutions are available <a href="https://github.com/ssledz/gitsvnkata/tree/kata-solutions">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standford's Automata Online Course - Course Review]]></title>
    <link href="http://ssledz.github.io/blog/2015/11/14/standfords-automata-online-course-course-review/"/>
    <updated>2015-11-14T11:44:06+01:00</updated>
    <id>http://ssledz.github.io/blog/2015/11/14/standfords-automata-online-course-course-review</id>
    <content type="html"><![CDATA[<p><a href="https://class.coursera.org/automata-004">Automata course</a> was six weeks long. Before taking the course I had some prior knowledge about <code>automata</code>, <code>regular expressions</code>, <code>context free grammar</code>, <code>turing machine</code> and <code>np-completeness</code>. In my opinion most of the lectures was clear and understandable. I found it very helpful to have a quizzes during each one. They were keeping me up on the track for a whole time. After each module there was a homework consisting of some test questions. For me those homeworks were the most valuable components of the course. It helped me a lot to fully understand the materials.</p>

<p>Of course not everything was straight forward. The most dificult topic, for me, was <code>np-completeness</code>. To be honest I didn’t fully understand it. I can only guessing that it was caused by the fact that I haven’t spent as much time during study as I should. Maybe I will return to that but now there are much more important things to do on top of my todo list.</p>

<p>After taking a final exam I have earned <code>Statement of Accomplishment</code> attached below.</p>

<p><img class="center" src="http://ssledz.github.io/images/custom/coursera/automata-statement-of-accomplishment.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Environment With Vagrant - Part 1]]></title>
    <link href="http://ssledz.github.io/blog/2015/11/08/java-development-environment-with-vagrant-part-1/"/>
    <updated>2015-11-08T16:06:35+01:00</updated>
    <id>http://ssledz.github.io/blog/2015/11/08/java-development-environment-with-vagrant-part-1</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>

<p>This post describes my development environment driven by Vagrant (Full description what can be found there is <a href="https://github.com/ssledz/vagrant-boxes/tree/master/java-dev-environment">here</a>). You can ask why Vagrant ? To be honest this is my first adventure with this tool. I am suprised how easy can be the process of setting brand new development environment. This tool can really save plenty of hours.</p>

<h3 id="what-is-vagranthttpsdocsvagrantupcomv2why-vagrantindexhtml-based-on-documentation">What is <a href="https://docs.vagrantup.com/v2/why-vagrant/index.html">Vagrant</a> (based on documentation)</h3>

<p>Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team. Sounds cool, isn’t it? One can configure the whole development environment with all the tools, needed libraries and various dependencies and other can just based on that create his own brand new development environment. The Process of introducing new team members into the project can be shortened by the time of setting new development environment.</p>

<h3 id="vagrant-providers">Vagrant Providers</h3>

<p>Vagrant has an ability to manage some of machine types like</p>

<ul>
  <li><code>VirtualBox</code></li>
  <li><code>VMware</code></li>
  <li><code>Docker</code></li>
  <li><code>Hyper-V</code></li>
</ul>

<p>In my setting I am using <code>Virtualbox</code> which is a free cross-platform consumer virtualization product supported by Oracle. To use this provider <code>VirtualBox</code> must be installed on its own. VirtualBox can be installed by <a href="https://www.virtualbox.org/wiki/Downloads">downloading</a> a package or installer for your operating system and using standard procedures to install that package.</p>

<h3 id="vagrant-installation">Vagrant Installation</h3>

<p>Visit the <a href="http://www.vagrantup.com/downloads">downloads page</a> and get the appropriate installer or package for your platform. Then install it using standard procedures for your operating system. The installer will automatically add <code>vagrant</code> to your system path so that it is available in terminals.</p>

<h3 id="setting-development-environment">Setting development environment</h3>

<p>To set up java development environment You need just type the following bunch of commands</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:ssledz/vagrant-boxes.git
</span><span class="line">cd vagrant-boxes/java-dev-environment
</span><span class="line">vagrant up</span></code></pre></td></tr></table></div></figure>

<p>Now vagrant box image is downloading from the box repository and then installation script <code>provision.sh</code> will be called.</p>

<p>The <code>provision.sh</code> trace can look following</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
</pre></td><td class="code"><pre><code class=""><span class="line">==&gt; default: Creating directories
</span><span class="line">==&gt; default:     Creating bin directory
</span><span class="line">==&gt; default:     Creating public_html directory
</span><span class="line">==&gt; default:     Creating servers directory
</span><span class="line">==&gt; default: Installing packages
</span><span class="line">==&gt; default:     apt-get update
</span><span class="line">==&gt; default:     Installing vim
</span><span class="line">==&gt; default:     Installing git
</span><span class="line">==&gt; default: Installing mc
</span><span class="line">==&gt; default:     Installing libssl-dev libreadline-dev zlib1g-dev
</span><span class="line">==&gt; default:     Installing make g++
</span><span class="line">==&gt; default:     Installing apg
</span><span class="line">==&gt; default:     Installing mysql-server
</span><span class="line">==&gt; default:         Creating /etc/mysql/conf.d/utf8_charset.cnf
</span><span class="line">==&gt; default:         Restarting mysql
</span><span class="line">==&gt; default:     Installing nginx-core ssl-cert
</span><span class="line">==&gt; default:         Creating /etc/nginx/sites-available/public_html
</span><span class="line">==&gt; default:         Enabling /etc/nginx/sites-available/public_html
</span><span class="line">==&gt; default:         Restarting nginx
</span><span class="line">==&gt; default: Downloading jdks
</span><span class="line">==&gt; default:     jdk-5u22-linux-x64.tar.gz is available
</span><span class="line">==&gt; default:     jdk-6u45-linux-x64.tar.gz is available
</span><span class="line">==&gt; default:     jdk-7u80-linux-x64.tar.gz is available
</span><span class="line">==&gt; default:     jdk-8u65-linux-x64.tar.gz is available
</span><span class="line">==&gt; default: Installing jdks
</span><span class="line">==&gt; default:     Extracting jdk-5u22-linux-x64.tar.gz
</span><span class="line">==&gt; default:     Extracting jdk-6u45-linux-x64.tar.gz
</span><span class="line">==&gt; default: Extracting jdk-7u80-linux-x64.tar.gz
</span><span class="line">==&gt; default:     Extracting jdk-8u65-linux-x64.tar.gz
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default: Installing apache-maven
</span><span class="line">==&gt; default:     Downloading apache-maven-3.3.3-bin.tar.gz
</span><span class="line">==&gt; default:     Extracting apache-maven-3.3.3-bin.tar.gz using tar
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default:     Creating symbolic link apache-maven
</span><span class="line">==&gt; default: Installing apache-ant
</span><span class="line">==&gt; default:     Downloading apache-ant-1.9.6-bin.tar.gz
</span><span class="line">==&gt; default:     Extracting apache-ant-1.9.6-bin.tar.gz using tar
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default:     Creating symbolic link apache-ant
</span><span class="line">==&gt; default: Installing gradle
</span><span class="line">==&gt; default:     Downloading gradle-2.8-bin.zip
</span><span class="line">==&gt; default:     Extracting gradle-2.8-bin.zip using unzip
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default:     Creating symbolic link gradle
</span><span class="line">==&gt; default: Installing sbt
</span><span class="line">==&gt; default:     Downloading sbt-0.13.9.tgz
</span><span class="line">==&gt; default:     Extracting sbt-0.13.9.tgz using tar
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default:     Creating symbolic link sbt
</span><span class="line">==&gt; default: Installing environment managers (for Java, Ruby, node.js and Python) 
</span><span class="line">==&gt; default:     Installing jenv
</span><span class="line">==&gt; default:         Clonning from github to ~/.jenv
</span><span class="line">==&gt; default:         Setting environment variables
</span><span class="line">==&gt; default:         Make build tools jenv aware
</span><span class="line">==&gt; default:             ant plugin activated
</span><span class="line">==&gt; default:             maven plugin activated
</span><span class="line">==&gt; default:             gradle plugin activated
</span><span class="line">==&gt; default:             sbt plugin activated
</span><span class="line">==&gt; default:     Installing rbenv
</span><span class="line">==&gt; default:         Clonning from github to ~/.rbenv
</span><span class="line">==&gt; default:         Installing plugins that provide rbenv install
</span><span class="line">==&gt; default:     Installing nodenv
</span><span class="line">==&gt; default:         Clonning from github to ~/.nodenv
</span><span class="line">==&gt; default:         Installing plugins that provide nodenv install
</span><span class="line">==&gt; default:     Installing pyenv
</span><span class="line">==&gt; default:         Clonning from github to ~/.pyenv
</span><span class="line">==&gt; default: Updating .bashrc
</span><span class="line">==&gt; default: Install runtimes using environment managers
</span><span class="line">==&gt; default:     Install java
</span><span class="line">==&gt; default:     Set jdk 1.8 globally
</span><span class="line">==&gt; default:     Install ruby
</span><span class="line">==&gt; default:     Install node.js
</span><span class="line">==&gt; default:     install python
</span><span class="line">==&gt; default: Installing apache-tomcat
</span><span class="line">==&gt; default:     Downloading apache-tomcat-8.0.28.tar.gz
</span><span class="line">==&gt; default:     Extracting apache-tomcat-8.0.28.tar.gz using tar
</span><span class="line">==&gt; default:     Cleaning
</span><span class="line">==&gt; default:     Creating symbolic link apache-tomcat
</span><span class="line">==&gt; default:     Creating apache-tomcat /bin/setenv.sh
</span><span class="line">==&gt; default:     Copying tomcat-users.xml to apache-tomcat/conf
</span><span class="line">==&gt; default:     Creating /etc/init.d/tomcat script
</span><span class="line">==&gt; default:     Starting tomcat</span></code></pre></td></tr></table></div></figure>

<p>To loggin to the machine do</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vagrant ssh</span></code></pre></td></tr></table></div></figure>

<p>To check what can You find in this environment please visit this <a href="https://github.com/ssledz/vagrant-boxes/tree/master/java-dev-environment">page</a>.</p>

<p>More about how to use this setting to develop in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual Box VDI Compaction]]></title>
    <link href="http://ssledz.github.io/blog/2015/10/13/virtual-box-vdi-compaction/"/>
    <updated>2015-10-13T10:00:43+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/10/13/virtual-box-vdi-compaction</id>
    <content type="html"><![CDATA[<p>Virtual Disk Image (<code>VDI</code>) files grow over time. If You discover that VDI on the host system is much bigger than used space on the guest partition it is time for compaction.</p>

<ol>
  <li>Install zerofree tool (<code>apt-get install zerofree</code>).</li>
  <li>Remove unused files (<code>apt-get autoremove</code>, <code>apt-get autoclean</code>, <code>orphaner --guess-all</code>).</li>
  <li>Reboot the guest system in single user mode (Grub menu will appear if you press and hold <code>Shift</code> during starting, 
then hit <code>e</code> when Grub boot appear and append <code>single</code> option to the Grub boot parameters).</li>
  <li>Remount filesystems as readonly (<code>mount -n -o remount,ro -t auto /dev/sda1 /</code>).</li>
  <li>Fill unused block with zeros (<code>zerofree /dev/sda1</code>). It’s time consuming operation. If You have other disk devices (e.g. <code>/dev/sda5</code>) then also perform <code>zerofree</code> on each one.</li>
  <li>Shutdown the system (<code>poweroff</code>).</li>
  <li>Compact VDI files on the host system (<code>VBoxManage modifyhd my.vdi compact</code>). It’s time consuming operation.</li>
</ol>

<p>Instead points 1,3-5 to fill free space with zeros You can do following (You don’t need to boot in single user mode)</p>

<ol>
  <li><code>sudo dd if=/dev/zero of=/bigemptyfile bs=4096k</code></li>
  <li><code>sudo rm -rf /bigemptyfile</code></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Pushing Error to GitHub]]></title>
    <link href="http://ssledz.github.io/blog/2015/10/01/octopress-pushing-error-to-github/"/>
    <updated>2015-10-01T00:40:41+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/10/01/octopress-pushing-error-to-github</id>
    <content type="html"><![CDATA[<p>When You get something like that</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">## Pushing generated _deploy website
</span><span class="line">To git@github.com:ssledz/ssledz.github.io.git
</span><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class="line">error: failed to push some refs to 'git@github.com:ssledz/ssledz.github.io.git'
</span><span class="line">hint: Updates were rejected because the tip of your current branch is behind
</span><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class="line">hint: 'git pull ...') before pushing again.
</span><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>
<p>just do following</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>_deploy
</span><span class="line">git reset --hard origin/master
</span><span class="line"><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure>
<p>and try again</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Free Grammar Will Help Where Regex Pattern Fail - Is This Well Formed Array ?]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array/"/>
    <updated>2015-08-17T00:04:55+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Some times ago I was scanning Stackoverflow to find a puzzle to solve, and I found one guy was trying to write a piece of software which had needed to answer on one simple question. Is given expression a <strong>well formed array</strong>? He was searching for a ready to use regular expression but he failed, because this puzzle can’t be solved using regex engine. Why, I will explain later but now I can say that this puzzle can be easily solved using <strong>Context free grammar</strong>.</p>

<h3 id="well-formed-array">Well formed array</h3>
<p>You can ask what does the <strong>well formed array</strong> mean ? I will try to answer by providing some positive and negative examples of such arrays.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[1 2 [-34 7] 34]
</span><span class="line">[1 2 [-34] [7] 34]
</span><span class="line">[1 2 [-34 [7] 34]]
</span><span class="line">[1 2[-34[7]34]]
</span><span class="line">[]
</span><span class="line">[[[]]]</span></code></pre></td></tr></table></div></figure>
<p>Above are well formed arrays. In opposite below are expressions which are not syntactically consistent with the definition of well formed array.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[1 2 -34 7] 34]
</span><span class="line">[1 2 [-34 [7] 34]
</span><span class="line">[][]</span></code></pre></td></tr></table></div></figure>
<p>Studying those examples we can try to answer on this question. So well formed array is an expression which fulfills following requirements</p>

<ul>
  <li>first, no blank, character is an open brace <code>'['</code></li>
  <li>the last no blank character needs to be a closed brace</li>
  <li>inside array, integers and other well formed arrays can appear</li>
  <li>integers are separated with at least one blank character</li>
</ul>

<h3 id="why-not-regex-">Why not regex ?</h3>
<p>Let’s simplified our example. Let’s say that we want to write a regular expression which will generate following words <script type="math/tex">w=( [^n\quad ]^n\quad|\quad n >= 1 )</script></p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[]
</span><span class="line">[[]]
</span><span class="line">[[]]
</span><span class="line">[[[]]]</span></code></pre></td></tr></table></div></figure>
<p>You can notice that the mention above strings are a subset of the set of strings which we want to parse. And here I don’t have also good news. We can’t use regex engine to parse such strings.
Why is it not possible ? Simply speaking regex engine modeled by a <strong>Finite Automata (FA)</strong> can’t count how many <code>'['</code> we have already used and check that the same number of <code>']'</code> must appear just after the last <code>'['</code>. <strong>FA</strong> doesn’t have stack to remember such things. If You are curious about formal proof you can try to google <strong>Pumping Lemma</strong> phrase. <strong>Pumping Lemma</strong> provides You a useful tool to proof if a given language (set of words which fulfill given conditions) is not a regular.</p>

<h3 id="context-free-grammar">Context free grammar</h3>
<p>I have already mentioned that to solve our problem (if a given array is well formed) we need to write a parser of some <strong>context free grammar</strong>. The model of <strong>Context free grammar</strong> is a <strong>Finite Automata</strong> with a <strong>stack</strong>. Thanks to this an Automat is able to remember some facts that have happened (e.g count braces). To write a parser we need first to write down a grammar for expression of <strong>well formed array</strong>. To do this I will use <strong>ebnf</strong> (Extended Backus–Naur Form) form.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">array = "[", { array-body }, "]" 
</span><span class="line">array-body = number | array
</span><span class="line">number = [ "-" ], digit, { digit }
</span><span class="line">digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;</span></code></pre></td></tr></table></div></figure>
<p>Now we are ready to write a parser.  To be precise I will use top-down parsing strategy which let me directly transform written above grammar into set of recursively called procedures.</p>

<h3 id="parser">Parser</h3>

<p>It is a good manner to split parser into 2 parts</p>

<ul>
  <li>lexer</li>
  <li>parser</li>
</ul>

<p>Lexer is responsible for grouping letters into tokens. In our grammar we have 4 kinds of tokens</p>

<ul>
  <li><code>'['</code> (<strong>LB</strong>)</li>
  <li><code>']'</code> (<strong>RB</strong>)</li>
  <li>number (<strong>NUMBER</strong>)</li>
  <li>end - token informing that there is no letter left on input  (<strong>END</strong>)</li>
</ul>

<p>Tokens are expressed by a class <code>Token</code> written below</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Token</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Type</span> <span class="o">{</span>
</span><span class="line">        <span class="n">LB</span><span class="o">,</span> <span class="n">RB</span><span class="o">,</span> <span class="n">NUMBER</span><span class="o">,</span> <span class="n">END</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Type</span> <span class="n">type</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Token</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Type</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">type</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="s">&quot;Token[&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;type=&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class="line">        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, value=&#39;&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\&#39;&#39;</span><span class="o">);</span>
</span><span class="line">        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;]&#39;</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="lexer">Lexer</h4>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lexer</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">current</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">input</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Lexer</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">input</span> <span class="o">=</span> <span class="n">input</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">char</span> <span class="nf">getChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">current</span><span class="o">++);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">unputChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">current</span><span class="o">--;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasNextChar</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">current</span> <span class="o">&lt;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Token</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">hasNextChar</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nf">Token</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">END</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isWhitespace</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nf">Token</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">LB</span><span class="o">,</span> <span class="s">&quot;[&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nf">Token</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">RB</span><span class="o">,</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">s</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="n">unputChar</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">StringBuilder</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">hasNextChar</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="n">unputChar</span><span class="o">();</span>
</span><span class="line">                <span class="k">break</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">Token</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">,</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">:</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="parser-1">Parser</h4>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parser</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Lexer</span> <span class="n">lexer</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Token</span> <span class="n">currentToken</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">match</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">type</span> <span class="o">==</span> <span class="n">currentToken</span><span class="o">.</span><span class="na">getType</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">consume</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">match</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Should be %s is %s&quot;</span><span class="o">,</span> <span class="n">type</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">currentToken</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">name</span><span class="o">()));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">currentToken</span> <span class="o">=</span> <span class="n">lexer</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">array</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">consume</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">LB</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">match</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">consume</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">match</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">LB</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">array</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="k">break</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">consume</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">RB</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">parse</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">lexer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Lexer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">        <span class="n">currentToken</span> <span class="o">=</span> <span class="n">lexer</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">array</span><span class="o">();</span>
</span><span class="line">        <span class="n">consume</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">END</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isWellFormedArray</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">parse</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s is not a proper array because %s&quot;</span><span class="o">,</span> <span class="n">line</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()));</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParserTest</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testIsWellFormedArray</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">Parser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Parser</span><span class="o">();</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2 [-34 7] 34]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2 -34 7] 34]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2 [-34] [7] 34]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2 [-34 [7] 34]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2 [-34 [7] 34]]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[][]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">false</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[[]]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">assertThat</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">isWellFormedArray</span><span class="o">(</span><span class="s">&quot;[1 2[-34[7]34]]&quot;</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Generate the Nth Fibonacci Number]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number/"/>
    <updated>2015-08-13T01:18:14+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Writing a method to generate the nth Fibonacci number is not a rocket science. The recursive formula for that is very simple and can be written following:</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fibonacci(0) = 0
</span><span class="line">fibonacci(1) = 1
</span><span class="line">fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)</span></code></pre></td></tr></table></div></figure>
<p>The n-th Fibonacci number is just the sum of two previous Fibonacci numbers and the first and second formula are our ‘base cases’. Based on this we can write a method <code>public static long slowFibonacci(int n)</code></p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>You have already noticed that instead of writing fibonacci I have written slowFibonacci. There is a reason for that and You may guessing that probably we can do something with this method to make it much faster and You have right. There is a quite usful programming method which we can use to improve the performance of this method. However before doing this let’s try to write a method call stack trace for let’s say 5th Fibonacci number.</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class="line"><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="o">----</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">----</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">3</span>
</span><span class="line"><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">---</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">--</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">-</span><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class="line"><span class="n">slowFibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>
<p>The number of dashes means how many delayed operations is on the stack. Dash followed by the ‘&gt;’ (‘-&gt;’) means that the operation can be computed (return value is provided) and removed from the stack.</p>

<p>You can notice that the same operations are evaluated many times, for example <code>slowFibonacci(2)</code> is computed 3 times. It is obvious waste of cpu resources. What can we do to use previously computed value instead of evaluating it again and again ?</p>

<h3 id="dynamic-programming">Dynamic programming</h3>
<p>‘Dynamic programming’ method comes to our rescue. According to the wiki, ‘dynamic programming’ is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems and optimal substructure. The dynamic programming approach seeks to solve each subproblem only once, thus reducing the number of computations: once the solution to a given subproblem has been computed, it is stored or “memoized”: the next time the same solution is needed, it is simply looked up.</p>

<p>What does it mean for us ? Each already solved subproblem (computed i-th Fibonacci number) can be saved in the let’s say global array and if the same solution is needed just simply look for it in that table.</p>

<h3 id="coding">Coding</h3>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fibonacci</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span><span class="o">[]</span> <span class="n">FIB</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">FIB</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="nf">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">slowFibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Call stack trace for this tuned method is following</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class="line"><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class="line"><span class="o">--</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="o">---</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line"><span class="o">----</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">----</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</span><span class="line"><span class="o">---</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">---</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span>
</span><span class="line"><span class="o">--</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class="line"><span class="o">--</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class="line"><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">3</span>
</span><span class="line"><span class="o">-</span><span class="n">fibonacci</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">2</span>
</span><span class="line"><span class="n">fibonacci</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>
<p>You can notice that the number of calls is much smaller then for <code>slowFibonacci(5)</code>.</p>

<p>At the end I would like to present a simple benchmark</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">fibonacci</span><span class="o">(</span><span class="mi">45</span><span class="o">)</span> <span class="o">=</span> <span class="mi">1134903170</span>
</span><span class="line"><span class="nl">Duration:</span> <span class="mi">0</span><span class="o">,</span><span class="mi">002000</span><span class="n">s</span>
</span><span class="line"><span class="nf">fibonacci</span><span class="o">(</span><span class="mi">60</span><span class="o">)</span> <span class="o">=</span> <span class="mi">1548008755920</span>
</span><span class="line"><span class="nl">Duration:</span> <span class="mi">0</span><span class="o">,</span><span class="mi">000000</span><span class="n">s</span>
</span><span class="line"><span class="nf">slowFibonacci</span><span class="o">(</span><span class="mi">45</span><span class="o">)</span> <span class="o">=</span> <span class="mi">1134903170</span>
</span><span class="line"><span class="nl">Duration:</span> <span class="mi">7</span><span class="o">,</span><span class="mi">893000</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>
<p>To compute 45-th Fibonacci number for <code>fibonacci</code> it takes 2ms and for <code>slowFibonacci</code> it takes 7.8s so a savings are significant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method That Return All Subsets of a Set]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set/"/>
    <updated>2015-08-09T21:52:26+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set</id>
    <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>Write a method <code>public static Set&lt;Set&lt;String&gt;&gt; subsets(Set&lt;String&gt; set)</code> which returns all subsets of a given set. From mathematics point of view we need to compute the power set of the given set. The number of such subsets can be easily computed because it just 2 to the power of ‘number of element in a set’. So for a set consisting of <code>3</code> elements it is 8.  To proceed let’s write some examples.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">subsets({'a'}) = {} + {'a'}
</span><span class="line">subsets({'b'}) = {} + {'b'}
</span><span class="line">subsets({'c'}) = {} + {'c'}
</span><span class="line">
</span><span class="line">subsets({'b','c'}) = {} + {'b'} + {'c'} + {'b','c'}
</span><span class="line">subsets({'a','c'}) = {} + {'a'} + {'c'} + {'a','c'}
</span><span class="line">subsets({'a','b'}) = {} + {'a'} + {'b'} + {'a','b'}
</span><span class="line">
</span><span class="line">subsets({'a', 'b', 'c'}) = {} + {'a'} + {'a','b'} + {'a','c'} + {'a','b','c'} + {'b'} + {'b','c'} + {'c'}</span></code></pre></td></tr></table></div></figure>

<p>Based on that we can notice a following pattern</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">subset('a')            = {}, {'a'}
</span><span class="line">subset('b')            = {}, {'b'}
</span><span class="line">subset('c')            = {}, {'c'}
</span><span class="line">subsets({'b','c'})     = subset({'b'}) + subset({'c'}) + {'b','c'}
</span><span class="line">subsets({'a','c'})     = subset({'a'}) + subset({'c'}) + {'a','c'}
</span><span class="line">subsets({'a','b'})     = subset({'a'}) + subset({'b'}) + {'a','b'}
</span><span class="line">subsets({'a','b','c'}) = subsets({'b','c'}) + subsets({'a','c'}) + subsets({'a','b'}) + {'a','b','c'}</span></code></pre></td></tr></table></div></figure>

<h3 id="coding">Coding</h3>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">subsets</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span><span class="line">        <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;());</span>
</span><span class="line">        <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">set</span><span class="o">));</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span><span class="line">    <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">e</span> <span class="o">:</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">newSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">set</span><span class="o">);</span>
</span><span class="line">        <span class="n">newSet</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">subsets</span> <span class="o">=</span> <span class="n">subsets</span><span class="o">(</span><span class="n">newSet</span><span class="o">);</span>
</span><span class="line">        <span class="n">ret</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">subsets</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;d&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">subs</span> <span class="o">=</span> <span class="n">subsets</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;size: &quot;</span> <span class="o">+</span> <span class="n">subs</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class="line">    <span class="k">for</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sub</span> <span class="o">:</span> <span class="n">subs</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nl">size:</span> <span class="mi">16</span>
</span><span class="line"><span class="o">[]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">b</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">c</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">b</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Reverse a String Using Recursion]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion/"/>
    <updated>2015-08-09T20:25:16+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion</id>
    <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>I bet that everyone who is reading this know how to write a method to revers the string, but does everyone know how to do it using recursion ? To face such puzzle it it always a good idea to write first some results for given arguments and try to find a pattern. There always must be a ‘base case’ which can’t be divided into subproblems. We also need to discover a procedure which solves bigger problem using its smaller subproblems.</p>

<p>So let’s say we need to write a method <code>public static String revers(String arg)</code> which for a given argument returns a reversed string. Below I have written some examples.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">revers('a')     = 'a'
</span><span class="line">revers('ab')    = 'ba'
</span><span class="line">revers('abc')   = 'cba'
</span><span class="line">revers('abcd')  = 'dcba'
</span><span class="line">revers('abcde') = 'edcba'</span></code></pre></td></tr></table></div></figure>
<p>Based on that we can already write a recursive procedure.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">revers('a')     = 'a'
</span><span class="line">revers('ab')    = 'b'|revers('a')
</span><span class="line">revers('abc')   = 'c'|revers('ab') 
</span><span class="line">revers('abcd')  = 'd'|revers('abc')
</span><span class="line">revers('abcde') = 'e'|revers('abcd')</span></code></pre></td></tr></table></div></figure>
<p>To compute a reversed string for <code>'a'</code> we need to return that string and it is our ‘base case’. In other cases to compute a reversed string we need to get the last char and concatenate it with the reversed string without that last character.</p>

<p>I think we are ready to write some code.</p>

<h3 id="coding">Coding</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">revers</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">arg</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">arg</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">arg</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">revers</span><span class="o">(</span><span class="n">arg</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">arg</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">revers</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">revers</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">revers</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">revers</span><span class="o">(</span><span class="s">&quot;abcd&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">revers</span><span class="o">(</span><span class="s">&quot;abcde&quot;</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">a</span>
</span><span class="line"><span class="n">ba</span>
</span><span class="line"><span class="n">cba</span>
</span><span class="line"><span class="n">dcba</span>
</span><span class="line"><span class="n">edcba</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Compute All Permutations of a String]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/08/puzzle-write-a-method-to-compute-all-permutations-of-a-string/"/>
    <updated>2015-08-08T21:06:54+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/08/puzzle-write-a-method-to-compute-all-permutations-of-a-string</id>
    <content type="html"><![CDATA[<h3 id="how-to-approche">How to Approche</h3>
<p>When we hear a problem beginning with: ‘Write a method to compute all…’, it is often a good candidate for recursion. By definition recursive solutions are built of solving subproblems. Simply speaking when we need to compute <code>f(n)</code>, we need first to solve a problem for <code>f(n-1)</code>, to solve the problem for <code>f(n-1)</code> we need to do the same for <code>f(n-2)</code> and so on. Always at the end we need to face so called ‘base case’ - <code>f(0)</code> or <code>f(1)</code>, which is the most easiest subproblem. Good news is that for this problem we know a solution and  many times it is just a hard coded value.</p>

<h4 id="problem">Problem</h4>
<p>Our task is to write a function <code>List&lt;String&gt;perm(String str)</code> which will return all permutations of a string given in the argument. To proceed let’s think how this problem can be splitted into smaller subproblems and how to connect those problems in the recursive way.</p>

<p>To find a pattern we will write all permutations of following strings <code>'a'</code>, <code>'b'</code>, <code>'c'</code>, <code>'ab'</code>, <code>'ac'</code>, <code>'bc'</code>, <code>'abc'</code></p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">perm('a')   = 'a'
</span><span class="line">perm('b')   = 'b'
</span><span class="line">perm('c')   = 'c'
</span><span class="line">perm('ab')  = 'ab', 'ba'
</span><span class="line">perm('ac')  = 'ac', 'ca'
</span><span class="line">perm('bc')  = 'bc', 'cb'
</span><span class="line">perm('abc') = 'abc', 'acb', 'bac', 'bca', 'cab', 'cba' </span></code></pre></td></tr></table></div></figure>

<p>If You have some experience in solving such puzzles You probably noticed a following pattern</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">perm('a')   = 'a'
</span><span class="line">perm('b')   = 'b'
</span><span class="line">perm('c')   = 'c'
</span><span class="line">perm('ab')  = 'a'|perm('b')  + 'b'|perm('a')
</span><span class="line">perm('ac')  = 'a'|perm('c')  + 'c'|perm('a')
</span><span class="line">perm('bc')  = 'b'|perm('c')  + 'c'|perm('b')
</span><span class="line">perm('abc') = 'a'|perm('bc') + 'b'|perm('ac') + 'c'|perm('ab')</span></code></pre></td></tr></table></div></figure>

<p>where <code>|</code> means a concatenation of two strings.</p>

<p>First three cases are called ‘base cases’ and as I mentioned before they can be easily solved. A permutation of a string containing one character is just the same string. At this point of analysis we can now try to write a small program which will solve our problem.</p>

<h3 id="coding">Coding</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class="line">        <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">permutations</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">left</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">        <span class="n">StringBuilder</span> <span class="n">subStr</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class="line">        <span class="n">subStr</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">subPermutations</span> <span class="o">=</span> <span class="n">permute</span><span class="o">(</span><span class="n">subStr</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">perm</span> <span class="o">:</span> <span class="n">subPermutations</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">permutations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">perm</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">permutations</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">permutations</span> <span class="o">=</span> <span class="n">permute</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;permutations size: %d&quot;</span><span class="o">,</span> <span class="n">permutations</span><span class="o">.</span><span class="na">size</span><span class="o">()));</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">perm</span> <span class="o">:</span> <span class="n">permutations</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">perm</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">permutations</span> <span class="nl">size:</span> <span class="mi">6</span>
</span><span class="line"><span class="n">abc</span>
</span><span class="line"><span class="n">acb</span>
</span><span class="line"><span class="n">bac</span>
</span><span class="line"><span class="n">bca</span>
</span><span class="line"><span class="n">cab</span>
</span><span class="line"><span class="n">cba</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>
