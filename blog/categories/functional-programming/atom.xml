<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional-programming | ssledz blog]]></title>
  <link href="http://ssledz.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2020-09-23T22:55:28+02:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Oriented Programming vs Functional Programming]]></title>
    <link href="http://ssledz.github.io/blog/2020/09/23/object-oriented-programming-vs-functional-programming/"/>
    <updated>2020-09-23T22:47:04+02:00</updated>
    <id>http://ssledz.github.io/blog/2020/09/23/object-oriented-programming-vs-functional-programming</id>
    <content type="html"><![CDATA[<p>Michael Feathers, the author of Working with Legacy Code, described in a neat way the difference between 
object and functional oriented programming:</p>

<blockquote>
  <blockquote>
    <p>OO makes code understandable by encapsulating moving parts. FP makes code understandable by minimizing moving parts.</p>
  </blockquote>
</blockquote>

<p>More can be found <a href="https://iiit.pl/object-oriented-programming-vs-functional-programming/?fbclid=IwAR2YnoVVf3dJMXOHkcGifpNVLklH636q0P21gvjISI4-s2UbkDrfal9KYAE">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Option Monad - From Scratch]]></title>
    <link href="http://ssledz.github.io/blog/2019/03/10/option-monad-from-scratch/"/>
    <updated>2019-03-10T11:28:42+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/03/10/option-monad-from-scratch</id>
    <content type="html"><![CDATA[<p>In a post <a href="/blog/2019/01/28/about-monads-a-gentle-introduction/">About Monads - a gentle introduction</a>
I have introduced a concept of <code>monad</code>. Since now we should have a good
intuition what <code>monad</code> is and be aware of the situations where 
it can be used to simplify the code and make it more readable.</p>

<p>In this post we will focus on an <code>Option</code> monad which wraps value in a context 
aware of whether or not the value exists. We will start with a problem and solution
not exactly suiting our needs and by adapting <code>Option</code> monad we will try to fix this.</p>

<h2 id="problem">Problem</h2>

<p>There are 3 streams of numbers given as a strings. 
<code>scala
val xs = List("0", "9", "9")
val ys = List("3", "3", "1")
val zs = List("2", "3", "2")
</code>
After zipping and flattening we got a stream  called <code>data</code> containing tuples
of 3 strings 
<code>scala
val data : List[(String, String, String)] = flatten(xs.zip(ys).zip(zs))
</code>
Our task is to build a pipeline that generates a stream of <code>Doubles</code> 
which is a result of division one number by another in a sequence in the 
context of the same tuple.</p>

<p>It means that the pipeline for a stream described as
<code>
[(x1,y1,z1), (x2,y2,z2),...(xn,yn,zn)]
</code>
should generate a stream of numbers given by formula mentioned below
<code>
[(x1/y1/z1), (x2/y2/z2),... (xn/yn/zn)]
</code>
This problem can be solved using following scala code
<code>scala
def pipeline = data
    .map((DivModule.div _).tupled(_))
</code>
<code>div</code> function is defined in <code>DivModule</code><br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">DivModule</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;arg can&#39;t be null&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">toDouble</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">div</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">z</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;(x | y | z) can&#39;t be null&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">xx</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">yy</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">y</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">zz</span> <span class="k">=</span> <span class="n">parse</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">yy</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">zz</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;y or z can&#39;t be 0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">xx</span> <span class="o">/</span> <span class="n">yy</span> <span class="o">/</span> <span class="n">zz</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">For</span> <span class="n">a</span> <span class="n">streams</span> <span class="n">of</span> <span class="n">numbers</span> <span class="n">defined</span> <span class="n">at</span> <span class="n">the</span> <span class="n">beginning</span> <span class="n">we</span> <span class="n">should</span> <span class="n">get</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="mf">4.5</span>
</span></code></pre></td></tr></table></div></figure> 
The numbers are correct, but take a look on implementation of a <code>parse</code>
and <code>div</code> functions. Those functions are not <code>total</code>. In functional world a function 
which is not <code>total</code> is called <code>partial</code>. A <code>partial</code> function is not defined 
for all values passed as its arguments.</p>

<p>And for following streams of numbers 
<code>scala
val xs = List("11", "22", "0" , "9", "9", null)
val ys = List("11", "0" , "33", "3", "3", "1")
val zs = List("0" , "22", "33", "2", "3", "2")
</code>
after running pipeline we get an <code>Exception</code>
<code>
Exception in thread "main" java.lang.IllegalArgumentException: y or z can't be 0
  at learning.monad.example.DivModule$.div(DivModule.scala:28)
  at learning.monad.example.MonadOption$.$anonfun$pipeline$2(MonadOption.scala:25)
  at learning.monad.example.MonadOption$.$anonfun$pipeline$2$adapted(MonadOption.scala:25)
</code>
We can easily fix this by lifting a partial function to a total function. 
Let’s add <code>lift</code> function to the <code>DivModule</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">type</span> <span class="kt">Fun3</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Double</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">lift</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Fun3</span><span class="o">,</span> <span class="n">defaultValue</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Fun3</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">z</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">defaultValue</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">and</span> <span class="n">modify</span> <span class="n">the</span> <span class="n">`pipeline`</span> <span class="n">accordingly</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">scala</span>
</span><span class='line'><span class="k">def</span> <span class="n">pipeline</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">lift</span><span class="o">(</span><span class="nc">DivModule</span><span class="o">.</span><span class="n">div</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">)).</span><span class="n">tupled</span><span class="o">(</span><span class="k">_</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">Now</span> <span class="n">`pipeline`</span> <span class="n">generates</span> <span class="n">streams</span> <span class="n">of</span> <span class="n">numbers</span> <span class="n">like</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span><span class="mf">1.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>
We can spot that for each undefined value we get <code>-1</code> because of <code>lift</code> 
function which maps all undefined values to the default one, in our case <code>-1</code>.</p>

<p>In order to get only a valid numbers let’s apply a filter<br />
<code>scala
def pipeline: List[Double] = data
  .map((DivModule.lift(DivModule.div, -1)).tupled(_))
  .filter(_ != -1)
</code></p>

<p>and our result is</p>

<p><code>
0.0, 1.5, 1.0
</code></p>

<p>For a first look this solution would seem to be good, but what about all
variations of streams for which pipeline could return <code>-1</code> as a correct result ?</p>

<p>For example, when we change fifth number in <code>zs</code> from <code>3</code> to <code>-3</code>
<code>scala
val xs = List("11", "22", "0" , "9", "9", null)
val ys = List("11", "0" , "33", "3", "3", "1")
val zs = List("0" , "22", "33", "2", "-3", "2")
</code></p>

<p>our pipeline will generate</p>

<p><code>
0.0, 1.5
</code></p>

<p>instead of</p>

<p><code>
0.0, 1.5, -1.0
</code></p>

<p>This is wrong and changing a default value in <code>lift</code> function doesn’t
fix this, because for each such case we can find a counterexample where
a correct value is filtered out. It is easy to prove that <code>div</code> function
returns numbers from the whole <code>Double</code> space. In category theory there is
a name for such functions (morphisms) - epimorphisms.</p>

<p>And here an <code>Option</code> monad comes to the rescue.</p>

<h2 id="option-monad">Option monad</h2>

<p>In order to implement an <code>Option</code> monad let’s start with defining a data type
constructor
<code>scala
trait Option[+A]
</code></p>

<p><code>Option</code> is an algebraic data type constructor parametrized with <code>A</code> in a <code>co-variant</code>
position. We can think of an <code>Option[_]</code> like about container keeping
a value. For now it has no context.</p>

<p>Let’s assigned a context to it by defining a value constructor called <code>Some</code>
<code>scala
case class Some[A](get: A) extends Option[A]
</code>
This constructor introduced a context of container with a none empty value.</p>

<p>A context meaning no value (empty container) can be defined with <code>None</code>
<code>scala
case object None extends Option[Nothing]
</code>
<code>None</code> reveals why we need a type parameter <code>A</code> to be in <code>co-variant</code> position -
we simply requires <code>None</code> to be cast to any <code>Option[A]</code>.</p>

<p>Recalling a definition of <code>Monad</code> we know that it consists of three parts:</p>

<ul>
  <li>type constructor <code>M[A]</code></li>
  <li>type converter (called <code>unit</code>, <code>pure</code> or <code>return</code>)</li>
  <li>combinator (called <code>bind</code>, <code>&gt;&gt;=</code> or <code>flatMap</code>)</li>
</ul>

<p>First part is fulfilled. Now we have to implement type converter - <code>pure</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Option</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">pure</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;a: A&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
<code>pure</code> is a function which is responsible for putting a given value
to the minimal meaningful context. For <code>Option</code> we requires that each
non <code>null</code> value should be bind to the <code>Some</code>, in other case
it should be <code>None</code>.</p>

<p>The toughest to implement is a combinator function called <code>flatMap</code>. For
an <code>Option</code> it is very easy task however.
<code>scala
trait Option[+A] {
  def flatMap[B](f: A =&gt; Option[B]): Option[B] = this match {
    case Some(a) =&gt; f(a)
    case None =&gt; None
  }
}
</code>
This higher order function is very powerful and can be used as a primitive
to implement for example <code>map</code> and <code>filter</code> in a following way
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; Option[B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">None</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; B&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">p</span> <span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Boolean</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">(</span><span class="n">a</span><span class="o">))</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">else</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
Thanks to the <code>flatMap</code> we are able to get a value from container, abstracting
whether or not the value exists or not, and apply a <code>map</code> transformation
deciding if we want to put the result again or replace container with an empty one.</p>

<p>Putting all parts together we can define <code>Option</code> monad in <code>scala</code> in the following way
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; Option[B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="k">this</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">None</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; B&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">a</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Option</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Option</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">pure</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;a: A&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">a</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;get: A&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="building-new-version-of-pipeline">Building new version of pipeline</h2>

<p>Let’s return to our problem. First we need to reimplement <code>parse</code>
<code>scala
def parse(x: Option[String]): Option[Double] = x.flatMap { str =&gt;
  try {
    Option.pure(str.toDouble)
  } catch {
    case e: Throwable =&gt; None
  }
}
</code>
Argument and return type has been lifted respectively to 
the <code>Option[String]</code> and <code>Option[Double]</code> type. You can spot
that I have used <code>flatMap</code> to have an access to the <code>String</code> value and
based on the <code>toDouble</code> operation I returned some <code>Double</code> value or nothing -
in case of parse exception. When an argument <code>x</code> is <code>None</code> the function
passed to <code>flatMap</code> is not executed - so I am sure that <code>String</code> passed
to monadic function is not <code>null</code> and I don’t have to make awkward <code>null</code> checks.</p>

<p>Next we need to take care of <code>div</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">div</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">zeroToNone</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="nc">None</span> <span class="k">else</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">xx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>    <span class="n">yy</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">y</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="n">zeroToNone</span><span class="o">)</span>
</span><span class='line'>    <span class="n">zz</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">parse</span><span class="o">(</span><span class="n">z</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="n">zeroToNone</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">yield</span> <span class="n">xx</span> <span class="o">/</span> <span class="n">yy</span> <span class="o">/</span> <span class="n">zz</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>String</code> arguments has been lifted to the <code>Option[String]</code> and return type
is now <code>Option[Double]</code>.</p>

<p>An <code>x</code> argument is passed to the <code>parse</code> and finally we have <code>Double</code> 
value in <code>xx</code> variable. If <code>parse</code> returns <code>None</code> then
the whole function <code>div</code> is evaluated to <code>None</code>.</p>

<p>For <code>y</code> and <code>z</code> things works almost the same with one difference - we additionally requires that
<code>yy</code> an <code>zz</code> must be none zero. This is expressed by calling <code>flatMap</code>
with function <code>zeroToNone</code>. For <code>0</code> value <code>zeroToNone</code> returns an empty 
container <code>None</code> which causes that the whole expression <code>parse(y).flatMap(zeroToNone)</code>
is evaluated to <code>None</code> what moves <code>div</code> function to return <code>None</code>.</p>

<p>Finally pipeline could look following
<code>scala
def pipeline2 = data
  .map(x =&gt; map3(x)(Option.pure))
  .map(z =&gt; (DivModuleWithOption.div _).tupled(z))
</code></p>

<p>This pipeline generates
<code>
List(None, None, Some(0.0), Some(1.5), Some(-1.0), None)
</code></p>

<p>At the end we need only to filter out nones and get the value out of the <code>Option</code></p>

<p>To do so there is a need to add 3 additional methods to <code>Option</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span><span class="n">skipped</span> <span class="k">for</span> <span class="n">brevity</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">isNonEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">!</span><span class="n">isEmpty</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">get</span> <span class="k">:</span> <span class="kt">A</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>and to corresponding subclasses
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;get: A&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">object</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">get</span> <span class="k">:</span> <span class="kt">Nothing</span> <span class="o">=</span> <span class="o">???</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally the pipeline
<code>scala
def pipeline2 = data
  .map(x =&gt; map3(x)(Option.pure))
  .map(z =&gt; (DivModuleWithOption.div _).tupled(z))
  .filter(_.isNonEmpty)
  .map(_.get)
</code></p>

<p>generates following stream of numbers
<code>
List(0.0, 1.5, -1.0)
</code></p>

<p>and this is all we need.</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-intro-session">Sources to the post</a></li>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-gentle-introduction">Implement monad from scratch - github sources</a></li>
  <li><a href="/blog/2019/01/28/about-monads-a-gentle-introduction/">About Monads - a gentle introduction</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monads - Lunch2Learn Session]]></title>
    <link href="http://ssledz.github.io/blog/2019/02/17/monads-lunch2learn-session/"/>
    <updated>2019-02-17T13:33:47+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/02/17/monads-lunch2learn-session</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="/presentations/monads-intro.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Monads - a Gentle Introduction]]></title>
    <link href="http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction/"/>
    <updated>2019-01-28T00:23:36+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/01/28/about-monads-a-gentle-introduction</id>
    <content type="html"><![CDATA[<p>In functional programming monad is a design pattern which is used to
express how states of computations are changing. It can take a form of some
abstract data type constructor with two abstract functions.</p>

<p>In <code>scala</code> we can define this contract using <code>Monad</code> type class
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">pure</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;x: A&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="n">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;xs: M[A]&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;xs: M[A]&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">xs</span><span class="o">)(</span><span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">pure</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Functions <code>pure</code> and <code>flatMap</code> for a given monad <code>M[_]</code> have to follow
some laws - I will talk about them later.</p>

<p>Function <code>map</code> can be defined
in terms of <code>flatMap</code> and <code>pure</code> and this is a bonus which we get for a free
when we provide an instance of a Monad for a type <code>M[_]</code>. Moreover many useful
functions can be defined in terms of <code>flatMap</code> and <code>pure</code> like <code>map2</code>, <code>ap</code>,
<code>filter</code> and so on. This interface is so powerful then often is treated
as a primitive one when goes to implement other functions.</p>

<p>We can think about <code>M[A]</code> like about some smart container
for a value (values) of type <code>A</code>. This container abstracts away from how this value
is kept. We can have many flavors of them like container:</p>

<ul>
  <li>aware of whether or not the value exists</li>
  <li>with more then one value</li>
  <li>for which getting the value would trigger some kind of <code>IO</code> operation</li>
  <li>with value which eventually could appear in future</li>
  <li>with value or error</li>
  <li>with value dependent on some kind of state</li>
  <li>with value and some logging information</li>
  <li>etc</li>
</ul>

<p><code>Monad</code> let us focus on what we want to do with the contained value. <code>Monad</code> is
like a <code>context</code> in which the value exists. When we want to do some computation
we are abstracting over the context so we aren’t disrupted whether or
not the value exists, we have many of them or the value may appear in a future.
We want just to get the value out of the container for a moment to make
some computation and then put it there again. The <code>context</code> is important only when
we want to pull out a value permanently.</p>

<p>Another advantage of the <code>monad</code> is an ability of sequencing the computations.
Having let’s say two computations we can very easily make dependence
between them saying that the computations of the second depends on
a result of the first. Of course this can be scaled to more than two.</p>

<p>At first glance, it may seem to be not so impressive because it is
very common to make such things during coding. But be aware that monad
frees us from thinking about the context in which the value exists. The context
can be for example an asynchronous computation. Dealing with concurrency
is challenging - we have to be very careful to not make a hard to spot mistakes.
Monad takes care about this complexity, providing a result of the
first computation as soon as possible giving us possibility to
spawn another computation in asynchronous manner.</p>

<h3 id="laws">Laws</h3>
<p>Each monad needs to follow three laws</p>

<ul>
  <li>Left identity: <code>return a &gt;&gt;= f ≡ f a</code></li>
  <li>Right identity: <code>m &gt;&gt;= return ≡ m</code></li>
  <li>Associativity: <code>(m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</code></li>
</ul>

<p>These laws was taken from haskell because expressions there are very compact and
easy to follow. Function <code>&gt;&gt;=</code> in scala maps to <code>flatMap</code>, <code>return</code> is
just a <code>pure</code>, <code>f x</code> is an application of function <code>f</code> with <code>x</code> and the
last one <code>\x -&gt; ...</code> is a lambda expression.</p>

<p>Laws in scala can be written in a following way (using ScalaCheck)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">monad</span> <span class="k">=</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">Monad</span><span class="o">[</span><span class="kt">M</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">property</span><span class="o">(</span><span class="err">“</span><span class="nc">Left</span> <span class="n">identity</span><span class="k">:</span> <span class="kt">return</span> <span class="kt">a</span><span class="err"> »</span><span class="o">=</span> <span class="n">f</span> <span class="o">≡</span> <span class="n">f</span> <span class="n">a</span><span class="err">”</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">(&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;(</span><span class="n">a</span><span class="o">)</span><span class="err"> »</span><span class="k">=</span> <span class="n">f</span><span class="o">)</span> <span class="o">===</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">property</span><span class="o">(</span><span class="err">“</span><span class="nc">Right</span> <span class="n">identity</span><span class="k">:</span> <span class="kt">m</span><span class="err"> »</span><span class="o">=</span> <span class="k">return</span> <span class="o">≡</span> <span class="n">m</span><span class="err">”</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span> <span class="n">m</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">(</span><span class="n">m</span><span class="err"> »</span><span class="k">=</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;)</span> <span class="o">===</span> <span class="n">m</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">property</span><span class="o">(</span><span class="err">“</span><span class="nc">Associativity</span><span class="k">:</span> <span class="o">(</span><span class="kt">m</span><span class="err"> »</span><span class="o">=</span> <span class="kt">f</span><span class="o">)</span><span class="err"> »</span><span class="k">=</span> <span class="n">g</span> <span class="o">≡</span> <span class="n">m</span><span class="err"> »</span><span class="k">=</span> <span class="o">(\</span><span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span> <span class="n">x</span><span class="err"> »</span><span class="k">=</span> <span class="n">g</span><span class="o">)</span><span class="err">”</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">forAll</span> <span class="o">{</span> <span class="o">(</span><span class="n">m</span><span class="k">:</span> <span class="kt">M</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">],</span> <span class="n">g</span><span class="k">:</span> <span class="kt">B</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">M</span><span class="o">[</span><span class="kt">C</span><span class="o">])</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">((</span><span class="n">m</span><span class="err"> »</span><span class="k">=</span> <span class="n">f</span><span class="o">)</span><span class="err"> »</span><span class="k">=</span> <span class="n">g</span><span class="o">)</span> <span class="o">===</span> <span class="o">(</span><span class="n">m</span><span class="err"> »</span><span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span><span class="err"> »</span><span class="k">=</span> <span class="n">g</span><span class="o">))</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span><span class="o">&lt;/</span><span class="n">code</span><span class="k">&gt;:</span> <span class="n">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">M</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">monad</span><span class="o">.</span><span class="n">pure</span> <span class="k">_</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span> <span class="k">implicit</span> <span class="k">class</span> <span class="nc">MonadOps</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;m: M[A]&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span><span class="err"> »</span><span class="o">=&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; M[B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="n">M</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">monad</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">m</span><span class="o">)(</span><span class="n">f</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
If you are curious about implementation details take a look on this <a href="https://raw.githubusercontent.com/ssledz/ssledz.github.io-src/master/monad-gentle-introduction/src/test/scala/monad/intro/AbstractMonadProperties.scala">class</a></p>

<h3 id="flavors-of-monads">Flavors of monads</h3>

<p>This section is a placeholder for a list of posts about monads mentioned in
this article. I will try my best to deliver a missing content. Watch my blog
for an update.</p>

<p>Monads:</p>

<ul>
  <li><a href="/blog/2019/03/10/option-monad-from-scratch/">Option</a></li>
  <li>Either</li>
  <li>Id</li>
  <li>Writer</li>
  <li>Reader</li>
  <li>State</li>
  <li>Try</li>
  <li>IO</li>
  <li>List</li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://www.quora.com/What-are-monads-in-functional-programming-and-why-are-they-useful-Are-they-a-generic-solution-to-the-problem-of-state-in-FP-or-Haskell-specific-Are-they-specific-to-Haskell-or-are-they-encountered-in-other-FP-languages">What are monads in functional programming and why are they useful?</a></li>
  <li><a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">You Could Have Invented Monads!</a></li>
  <li><a href="https://dev.to/theodesp/explain-monads-like-im-five">Explain Monads Like I’m five</a></li>
  <li><a href="https://wiki.haskell.org/All_About_Monads">All About Monads</a></li>
  <li><a href="https://www.haskell.org/tutorial/monads.html">A Gentle Introduction to Haskell</a></li>
  <li><a href="http://learnyouahaskell.com/a-fistful-of-monads">A Fistful of Monads</a></li>
  <li><a href="https://github.com/ssledz/ssledz.github.io-src/tree/master/monad-gentle-introduction">Sources to the post</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monad Transformers - Part 2]]></title>
    <link href="http://ssledz.github.io/blog/2019/01/24/monad-transformers-part-2/"/>
    <updated>2019-01-24T21:46:06+01:00</updated>
    <id>http://ssledz.github.io/blog/2019/01/24/monad-transformers-part-2</id>
    <content type="html"><![CDATA[<p>In a previous <a href="/blog/2018/12/18/monad-transformers-a-quick-recap/">post</a>
I introduced monad transformers and since now we should have a good feeling
about their usage and how they can be helpful.</p>

<p>Designing a monad transformer we decided to fix inner most monad. This
decision was dictated by the fact that we couldn’t replace code dependent
on internal representation of that inner most monad. I think that this step
could not be as obvious as I expected to be. And now I will try to
make it more clear.</p>

<p>Let’s try to bite the problem from different side. Assume that we can write
a monad transformer and know nothing about monads internal representation.
Let’s call it <code>CMonad</code> (shorthand from <code>ComposedMonad</code>).</p>

<p>Such a class could look like
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;value: F[G[A]]&quot;</span><span class="o">&gt;</span><span class="n">F</span><span class="o">[</span><span class="kt">&lt;em&gt;</span><span class="o">],</span> <span class="n">G</span><span class="o">[</span><span class="kt">&lt;/em&gt;</span><span class="o">],</span> <span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; CMonad[F, G, B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; B&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
Here <code>F[_]</code> and <code>G[_]</code> are higher kinded type representing outer and inner most monad.</p>

<p>Then a problem introduced in a previous post could be solved following
<code>scala
def findStreetByLogin(login: String): CMonad[Future, Option, String] =
  for {
    user &lt;- CMonad(findUserByLogin(login))
    address &lt;- CMonad(findAddressByUserId(user.id))
  } yield address.street
</code></p>

<p>Of course it doesn’t work because we haven’t yet provided implementation for <code>flatMap</code> and <code>map</code></p>

<p>Let’s start with <code>flatMap</code>. To make things clear a little I introduced a new
method <code>flatMapF</code> and defined <code>flatMap</code> in terms of <code>flatMapF</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;value: F[G[A]]&quot;</span><span class="o">&gt;</span><span class="n">F</span><span class="o">[</span><span class="kt">&lt;em&gt;</span><span class="o">],</span> <span class="n">G</span><span class="o">[</span><span class="kt">&lt;/em&gt;</span><span class="o">],</span> <span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMapF</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; F[G[B]]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; CMonad[F, G, B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; B&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
In order to apply <code>f : A =&gt; F[G[B]]</code> we need to extract <code>A</code> from <code>value: F[G[A]]</code></p>

<p>One attempt could end with following code
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">CMonad</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;value: F[G[A]]&quot;</span><span class="o">&gt;</span><span class="n">F</span><span class="o">[</span><span class="kt">&lt;em&gt;</span><span class="o">],</span> <span class="n">G</span><span class="o">[</span><span class="kt">&lt;/em&gt;</span><span class="o">],</span> <span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMapF</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; F[G[B]]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">ga</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">gb</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">G</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">ga</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>         <span class="o">???</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">gb</span><span class="o">)</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">flatMap</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; CMonad[F, G, B]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="n">flatMapF</span><span class="o">(</span><span class="n">a</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="n">value</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; B&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">ComposedMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">Now</span> <span class="n">we</span> <span class="n">can</span> <span class="n">apply</span> <span class="n">`f`</span> <span class="k">with</span> <span class="n">`A`</span> <span class="n">and</span> <span class="n">we</span> <span class="n">will</span> <span class="n">get</span> <span class="n">`fgb : F[G[B]]`</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">scala</span>
</span><span class='line'> <span class="k">def</span> <span class="n">flatMapF</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;f: A =&amp;gt; F[G[B]]&quot;</span><span class="o">&gt;</span><span class="n">B</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span> <span class="n">G</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">G</span><span class="o">])</span><span class="k">:</span> <span class="kt">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>   <span class="nc">CMonad</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">G</span>, <span class="kt">B</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="n">ga</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">gb</span><span class="k">:</span> <span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="n">G</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">ga</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>         <span class="k">val</span> <span class="n">fgb</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">G</span><span class="o">[</span><span class="kt">B</span><span class="o">]]</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>         <span class="o">???</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">gb</span><span class="o">)</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
In order to make compiler happy we need to take one step more - extract
<code>G[B]</code> from <code>F[G[B]]</code> and return that value from inner most <code>flatMap</code>.
This of course is not possible knowing only that <code>F</code> and <code>G</code> form a monad.</p>

<p>Another attempt can lead us to the code like
<code>scala
 def flatMapF[B](f: A =&gt; F[G[B]])(implicit F: Monad[F], G: Monad[G]): CMonad[F, G, B] =
   CMonad[F, G, B] {
     F.flatMap(value) { ga: G[A] =&gt;
       val gfgb: G[F[G[B]]] = G.map(ga) { a: A =&gt;
         f(a)
       }
       ???
     }
   }
</code>
And now we need to extract <code>F[G[B]]</code> from <code>G[F[G[B]]]</code>. This also is not possible
if we know nothing about internal representation of <code>G</code>.</p>

<p>All this leads us to the conclusion that we can’t write a monad transformer
if we know nothing, about the monads.</p>
]]></content>
  </entry>
  
</feed>
