<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional-programming | My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2018-12-05T17:39:05+01:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gentle Introduction to Functional Programming - Live Coding Session]]></title>
    <link href="http://ssledz.github.io/blog/2018/12/05/genetle-fp-intro/"/>
    <updated>2018-12-05T21:33:42+01:00</updated>
    <id>http://ssledz.github.io/blog/2018/12/05/genetle-fp-intro</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="/presentations/gentle-fp-intro.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - a Quick Introduction]]></title>
    <link href="http://ssledz.github.io/blog/2017/10/25/recursion-a-quick-introduction/"/>
    <updated>2017-10-25T02:33:42+02:00</updated>
    <id>http://ssledz.github.io/blog/2017/10/25/recursion-a-quick-introduction</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="/presentations/recursion.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Bash - Introduction to fun.sh Library]]></title>
    <link href="http://ssledz.github.io/blog/2017/08/21/functional-programming-in-bash-introduction-to-fun-dot-sh-library/"/>
    <updated>2017-08-21T00:28:33+02:00</updated>
    <id>http://ssledz.github.io/blog/2017/08/21/functional-programming-in-bash-introduction-to-fun-dot-sh-library</id>
    <content type="html"><![CDATA[<p>Slides for Lunch2Learn (L2L) session are available <a href="/presentations/bash-fun.html">here</a>.</p>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://github.com/ssledz/bash-fun">bash-fun</a></li>
  <li><a href="https://github.com/ssledz/bash-import">bash-import</a></li>
  <li><a href="https://github.com/ssledz/bash-repo">bash-repo</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Scala - Writing Function : Flatten]]></title>
    <link href="http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten/"/>
    <updated>2016-07-25T00:25:57+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/07/25/playing-with-scala-writing-function-flatten</id>
    <content type="html"><![CDATA[<p>Few weeks ago since now :) I started participating in a course <strong>‘Functional Programming Principles in Scala’</strong> by 
<strong>Martin Odersky</strong>. I have already completed 4 weeks (course consists of 6 weeks) and I can tell honestly that this is 
the best course I’ve ever been doing.</p>

<p>My knowledge about scala is still increasing !</p>

<p>Below you can find a sample of what I can now do. The problem is to implement function
<code>flatten(xs: List[Any]): List[Any]</code> which takes a list of anything an tries to flatten it. For example</p>

<p><code>scala
flatten(List(List(1, 1), 2, List(3, List(5, 8))))
</code></p>

<p>should return a following list</p>

<p><code>scala
List[Any] = List(1, 1, 2, 3, 5, 8)
</code></p>

<p><div><script src='https://gist.github.com/fa5227685dda83e8b895ac9578a206b6.js'></script>
<noscript><pre><code>/**
  * Created by ssledz on 25.07.16.
  */
object Flatten {

  def flatten(xs: List[Any]): List[Any] = xs match {
    case List() =&gt; Nil
    case y :: ys =&gt; {
      y match {
        case z: List[Any] =&gt; flatten(z)
        case _ =&gt; List(y)
      }
    } ::: flatten(ys)
    case _ =&gt; List(xs)

  }

  def main(args: Array[String]) {
    List(
      flatten(List(List(1, 1), 2, List(3, List(5, 8)))),
      flatten(List(1, 2, 3)),
      flatten(List(List(1, 2), 3, List(4))),
      flatten(List(List(List(List(1, 2), 3, List(4))), List(5, 6, 7)))
    ) foreach println
  }

}</code></pre></noscript></div>
</p>

<p>At the end I would like to say <strong>‘thank you’</strong> to <strong><a href="https://www.atlassian.com/">Atlassian</a></strong> company for paying a half 
for this course !</p>
]]></content>
  </entry>
  
</feed>
