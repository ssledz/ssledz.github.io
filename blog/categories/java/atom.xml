<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | My Programmer's Road]]></title>
  <link href="http://ssledz.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ssledz.github.io/"/>
  <updated>2016-05-15T20:11:39+02:00</updated>
  <id>http://ssledz.github.io/</id>
  <author>
    <name><![CDATA[Sławomir Śledź]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oracle Certified Associate Java SE 8 Programmer 1Z0-808 Exam - Review]]></title>
    <link href="http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review/"/>
    <updated>2016-05-15T12:01:32+02:00</updated>
    <id>http://ssledz.github.io/blog/2016/05/15/oracle-certified-associate-java-se-8-programmer-1z0-808-exam-review</id>
    <content type="html"><![CDATA[<p>After successfully passed <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808">Java SE 8 Programmer 1Z0-808 Exam</a>
I would like to share my thoughts about the preparation and the exam.</p>

<p>I passed the exam and earn the 
<a href="https://www.youracclaim.com/badges/58fa8011-f1da-4a68-846c-b869ee04012b/public_url">badge</a> 
on Dec 2015 - so almost half year ago (since writing this post). 
Before preparation I was playing already with <code>java 8</code> a little. 
I have written two, maybe three applications which were using some 
new hot features like <code>lambda</code>, <code>default methods</code> and <code>streams</code>.
The whole knowledge how to do this I got mainly from oracle 
tutorials like</p>

<ul>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html">Aggregate Operations</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">Default Methods</a></li>
</ul>

<p>In spite of my experience as a java programmer I decided to spend some 
time to learn more about <code>java 8</code> to ensure that I would really pass the exam.</p>

<p>My journey I have started with the book: <a href="https://www.goodreads.com/book/show/23059696-oca?from_search=true&amp;search_version=service">Oca: Oracle Certified Associate Java Se 8 Programmer I Study Guide: Exam 1z0-808</a>.
It took me some time, I think one month, to go through all chapters.
The book I was mainly reading during my way to work in metro, bus or tram.
I can say that I was enjoying reading it though I have already known 
most of the knowledge. It is written with a very simple language. I can say
that this book could be understandable by peoples who speak english in an 
intermediate level. It covers all the topics which can appear on 
an exam. After finishing it I bought the voucher on an exam, taking place 
a week later. I had one whole week to play around <code>java 8</code>, make some
tests and review things read in a book. To practice tests I used 
<a href="https://sybextestbanks.wiley.com/public/">sybex</a> platform. In order to 
get an access to this platform you only need to own a book.</p>

<p>On a site you can find 345 test questions divided into 3 sets</p>

<ul>
  <li>Assessment Test (20) - helps you focus your study to specific objectives</li>
  <li>Chapter Tests (145) - taken from the Review Questions at the end of chapters in the book</li>
  <li>Practice Exam (180) - provided to help you prepare for the certification test
Platform also provides an access to 2 other study tools</li>
  <li>Flashcards - help to reinforce your learning and provide last-minute test prep before the exam</li>
  <li>Searchable Glossary - an instant access to the key terms you’ll need to know for the exam</li>
</ul>

<p>In the day before the exam I decided to go sleep early. 
The exam lasted 150 minutes, and I had enough time to
answer on all the questions. They weren’t difficult. I can say
that the questions in a mockup exam from sybex were much harder. For example
if the question was a multiple choice question, in a real exam 
I was informed how many answers I needed to check, 
in a mockup exam I weren’t.</p>

<p>One hour after the exam I received an email that my exam results are available. 
My score was <code>97%</code>. Regarding the response from <code>Oracle</code> 
I made a mistakes in a questions from the following exam objectives</p>

<ul>
  <li>Define the scope of variables</li>
  <li>Manipulate data using the StringBuilder class and methods</li>
</ul>

<p>It could sound strange that the experienced java developer made 
mistakes from the such basic topics. But believe me that the real 
intention of the test authors is to trick you in an unexpected way. 
The question could seem to be about let’s say lambda syntax, but in real
tests your knowledge about variable scoping. During taking tests you 
need to be very careful and stay focused all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Free Grammar Will Help Where Regex Pattern Fail - Is This Well Formed Array ?]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array/"/>
    <updated>2015-08-17T00:04:55+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/17/context-free-grammar-will-help-where-regex-pattern-fail-is-this-well-formed-array</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Some times ago I was scanning Stackoverflow to find a puzzle to solve, and I found one guy was trying to write a piece of software which had needed to answer on one simple question. Is given expression a <strong>well formed array</strong>? He was searching for a ready to use regular expression but he failed, because this puzzle can’t be solved using regex engine. Why, I will explain later but now I can say that this puzzle can be easily solved using <strong>Context free grammar</strong>.</p>

<h3 id="well-formed-array">Well formed array</h3>
<p>You can ask what does the <strong>well formed array</strong> mean ? I will try to answer by providing some positive and negative examples of such arrays.
<code>
[1 2 [-34 7] 34]
[1 2 [-34] [7] 34]
[1 2 [-34 [7] 34]]
[1 2[-34[7]34]]
[]
[[[]]]
</code>
Above are well formed arrays. In opposite below are expressions which are not syntactically consistent with the definition of well formed array.
<code>
[1 2 -34 7] 34]
[1 2 [-34 [7] 34]
[][]
</code>
Studying those examples we can try to answer on this question. So well formed array is an expression which fulfills following requirements</p>

<ul>
  <li>first, no blank, character is an open brace <code>'['</code></li>
  <li>the last no blank character needs to be a closed brace</li>
  <li>inside array, integers and other well formed arrays can appear</li>
  <li>integers are separated with at least one blank character</li>
</ul>

<h3 id="why-not-regex-">Why not regex ?</h3>
<p>Let’s simplified our example. Let’s say that we want to write a regular expression which will generate following words <script type="math/tex">w=( [^n\quad ]^n\quad|\quad n >= 1 )</script>
<code>
[]
[[]]
[[]]
[[[]]]
</code>
You can notice that the mention above strings are a subset of the set of strings which we want to parse. And here I don’t have also good news. We can’t use regex engine to parse such strings.
Why is it not possible ? Simply speaking regex engine modeled by a <strong>Finite Automata (FA)</strong> can’t count how many <code>'['</code> we have already used and check that the same number of <code>']'</code> must appear just after the last <code>'['</code>. <strong>FA</strong> doesn’t have stack to remember such things. If You are curious about formal proof you can try to google <strong>Pumping Lemma</strong> phrase. <strong>Pumping Lemma</strong> provides You a useful tool to proof if a given language (set of words which fulfill given conditions) is not a regular.</p>

<h3 id="context-free-grammar">Context free grammar</h3>
<p>I have already mentioned that to solve our problem (if a given array is well formed) we need to write a parser of some <strong>context free grammar</strong>. The model of <strong>Context free grammar</strong> is a <strong>Finite Automata</strong> with a <strong>stack</strong>. Thanks to this an Automat is able to remember some facts that have happened (e.g count braces). To write a parser we need first to write down a grammar for expression of <strong>well formed array</strong>. To do this I will use <strong>ebnf</strong> (Extended Backus–Naur Form) form.
<code>
array = "[", { array-body }, "]" 
array-body = number | array
number = [ "-" ], digit, { digit }
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
</code>
Now we are ready to write a parser.  To be precise I will use top-down parsing strategy which let me directly transform written above grammar into set of recursively called procedures.</p>

<h3 id="parser">Parser</h3>

<p>It is a good manner to split parser into 2 parts</p>

<ul>
  <li>lexer</li>
  <li>parser</li>
</ul>

<p>Lexer is responsible for grouping letters into tokens. In our grammar we have 4 kinds of tokens</p>

<ul>
  <li><code>'['</code> (<strong>LB</strong>)</li>
  <li><code>']'</code> (<strong>RB</strong>)</li>
  <li>number (<strong>NUMBER</strong>)</li>
  <li>end - token informing that there is no letter left on input  (<strong>END</strong>)</li>
</ul>

<p>Tokens are expressed by a class <code>Token</code> written below</p>

<p>```java
public class Token {</p>

<pre><code>public enum Type {
    LB, RB, NUMBER, END
}

private final Type type;
private final String value;

public Token(Type type, String value) {
    this.type = type;
    this.value = value;
}

public Type getType() {
    return type;
}

public String getValue() {
    return value;
}

@Override
public String toString() {
    final StringBuilder sb = new StringBuilder("Token[");
    sb.append("type=").append(type);
    sb.append(", value='").append(value).append('\'');
    sb.append(']');
    return sb.toString();
} } ```
</code></pre>

<h4 id="lexer">Lexer</h4>

<p>```java
public class Lexer {</p>

<pre><code>private int current;
private String input;

public Lexer(String input) {
    this.input = input;
}

private char getChar() {
    return input.charAt(current++);
}

private void unputChar() {
    current--;
}

private boolean hasNextChar() {
    return current &lt; input.length();
}

public Token next() {

    if (!hasNextChar()) {
        return new Token(Type.END, "");
    }

    char c = getChar();

    while (Character.isWhitespace(c)) {
        c = getChar();
    }

    if (c == '[') {
        return new Token(Type.LB, "[");
    }

    if (c == ']') {
        return new Token(Type.RB, "]");
    }

    int s = 1;
    if (c == '-') {
        s = -1;
    } else {
        unputChar();
    }

    StringBuilder buffer = new StringBuilder();
    while (hasNextChar()) {

        c = getChar();

        if (Character.isDigit(c)) {
            buffer.append(c);
        } else {
            unputChar();
            break;
        }

    }

    return new Token(Type.NUMBER, s &gt; 0 ? buffer.toString() : "-" + buffer.toString());

} } ```
</code></pre>

<h4 id="parser-1">Parser</h4>

<p>```java
public class Parser {</p>

<pre><code>private Lexer lexer;
private Token currentToken;

private boolean match(Type type) {
    return type == currentToken.getType();
}

private void consume(Type type) {
    if (!match(type)) {
        throw new RuntimeException(String.format("Should be %s is %s", type.name(), currentToken.getType().name()));
    }
    currentToken = lexer.next();
}

private void array() {

    consume(Type.LB);

    while (true) {

        if (match(Type.NUMBER)) {
            consume(Type.NUMBER);
        } else if (match(Type.LB)) {
            array();
        } else {
            break;
        }

    }

    consume(Type.RB);
}


private void parse(String line) {

    lexer = new Lexer(line);
    currentToken = lexer.next();

    array();
    consume(Type.END);

}

public boolean isWellFormedArray(String line) {

    try {
        parse(line);
        return true;
    } catch (Exception e) {
        System.out.println(String.format("%s is not a proper array because %s", line, e.getMessage()));
        return false;
    }

}
</code></pre>

<p>}
<code>
</code>java
public class ParserTest {</p>

<pre><code>@Test
public void testIsWellFormedArray() throws Exception {

    Parser parser = new Parser();
    assertThat(parser.isWellFormedArray("[1 2 [-34 7] 34]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2 -34 7] 34]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[1 2 [-34] [7] 34]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2 [-34 [7] 34]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[1 2 [-34 [7] 34]]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[][]"), equalTo(false));
    assertThat(parser.isWellFormedArray("[[]]"), equalTo(true));
    assertThat(parser.isWellFormedArray("[1 2[-34[7]34]]"), equalTo(true));

} } ```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Generate the Nth Fibonacci Number]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number/"/>
    <updated>2015-08-13T01:18:14+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/13/puzzle-write-a-method-to-generate-the-nth-fibonacci-number</id>
    <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<p>Writing a method to generate the nth Fibonacci number is not a rocket science. The recursive formula for that is very simple and can be written following:
<code>
fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)
</code>
The n-th Fibonacci number is just the sum of two previous Fibonacci numbers and the first and second formula are our ‘base cases’. Based on this we can write a method <code>public static long slowFibonacci(int n)</code>
```java
    public static long slowFibonacci(int n) {</p>

<pre><code>    if (n == 0 || n == 1) {
        return n;
    }

    return slowFibonacci(n - 1) + slowFibonacci(n - 2);

} ``` You have already noticed that instead of writing fibonacci I have written slowFibonacci. There is a reason for that and You may guessing that probably we can do something with this method to make it much faster and You have right. There is a quite usful programming method which we can use to improve the performance of this method. However before doing this let's try to write a method call stack trace for let's say 5th Fibonacci number. ``` slowFibonacci(5) -slowFibonacci(4) --slowFibonacci(3) ---slowFibonacci(2) ----slowFibonacci(1) -&gt; 1 ----slowFibonacci(0) -&gt; 0 ---slowFibonacci(2) -&gt; 1 ---slowFibonacci(1) -&gt; 1 --slowFibonacci(3) -&gt; 2 --slowFibonacci(2) ---slowFibonacci(1) -&gt; 1 ---slowFibonacci(0) -&gt; 0 --slowFibonacci(2) -&gt; 1 -slowFibonacci(4) -&gt; 3 -slowFibonacci(3) --slowFibonacci(2) ---slowFibonacci(1) -&gt; 1 ---slowFibonacci(0) -&gt; 1 --slowFibonacci(2) -&gt; 1 --slowFibonacci(1) -&gt; 1 -slowFibonacci(3) -&gt; 2 slowFibonacci(5) -&gt; 5 ``` The number of dashes means how many delayed operations is on the stack. Dash followed by the '&gt;' ('-&gt;') means that the operation can be computed (return value is provided) and removed from the stack. 
</code></pre>

<p>You can notice that the same operations are evaluated many times, for example <code>slowFibonacci(2)</code> is computed 3 times. It is obvious waste of cpu resources. What can we do to use previously computed value instead of evaluating it again and again ?</p>

<h3 id="dynamic-programming">Dynamic programming</h3>
<p>‘Dynamic programming’ method comes to our rescue. According to the wiki, ‘dynamic programming’ is a method for solving a complex problem by breaking it down into a collection of simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems and optimal substructure. The dynamic programming approach seeks to solve each subproblem only once, thus reducing the number of computations: once the solution to a given subproblem has been computed, it is stored or “memoized”: the next time the same solution is needed, it is simply looked up.</p>

<p>What does it mean for us ? Each already solved subproblem (computed i-th Fibonacci number) can be saved in the let’s say global array and if the same solution is needed just simply look for it in that table.</p>

<h3 id="coding">Coding</h3>
<p>```java
public class Fibonacci {</p>

<pre><code>private static long[] FIB = new long[100];

public static long fibonacci(int n) {

    if (n == 0 || n == 1) {
        return n;
    }

    if (FIB[n] != 0) {
        return FIB[n];
    }

    FIB[n] = fibonacci(n - 1) + fibonacci(n - 2);

    return FIB[n];

}

public static long slowFibonacci(int n) {

    if (n == 0 || n == 1) {
        return n;
    }

    return slowFibonacci(n - 1) + slowFibonacci(n - 2);

}
</code></pre>

<p>}
<code>
Call stack trace for this tuned method is following
</code>
fibonacci(5)
-fibonacci(4)
–fibonacci(3)
—fibonacci(2)
—-fibonacci(1) -&gt; 1
—-fibonacci(0) -&gt; 0
—fibonacci(2) -&gt; 1
—fibonacci(1) -&gt; 1
–fibonacci(3) -&gt; 2
–fibonacci(2) -&gt; 2
-fibonacci(4) -&gt; 3
-fibonacci(3) -&gt; 2
fibonacci(5) -&gt; 5
```
You can notice that the number of calls is much smaller then for <code>slowFibonacci(5)</code>.</p>

<p>At the end I would like to present a simple benchmark
<code>
fibonacci(45) = 1134903170
Duration: 0,002000s
fibonacci(60) = 1548008755920
Duration: 0,000000s
slowFibonacci(45) = 1134903170
Duration: 7,893000s
</code>
To compute 45-th Fibonacci number for <code>fibonacci</code> it takes 2ms and for <code>slowFibonacci</code> it takes 7.8s so a savings are significant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method That Return All Subsets of a Set]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set/"/>
    <updated>2015-08-09T21:52:26+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-that-return-all-subsets-of-a-set</id>
    <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>Write a method <code>public static Set&lt;Set&lt;String&gt;&gt; subsets(Set&lt;String&gt; set)</code> which returns all subsets of a given set. From mathematics point of view we need to compute the power set of the given set. The number of such subsets can be easily computed because it just 2 to the power of ‘number of element in a set’. So for a set consisting of <code>3</code> elements it is 8.  To proceed let’s write some examples.
```
subsets({‘a’}) = {} + {‘a’}
subsets({‘b’}) = {} + {‘b’}
subsets({‘c’}) = {} + {‘c’}</p>

<p>subsets({‘b’,’c’}) = {} + {‘b’} + {‘c’} + {‘b’,’c’}
subsets({‘a’,’c’}) = {} + {‘a’} + {‘c’} + {‘a’,’c’}
subsets({‘a’,’b’}) = {} + {‘a’} + {‘b’} + {‘a’,’b’}</p>

<p>subsets({‘a’, ‘b’, ‘c’}) = {} + {‘a’} + {‘a’,’b’} + {‘a’,’c’} + {‘a’,’b’,’c’} + {‘b’} + {‘b’,’c’} + {‘c’}
```</p>

<p>Based on that we can notice a following pattern
<code>
subset('a')            = {}, {'a'}
subset('b')            = {}, {'b'}
subset('c')            = {}, {'c'}
subsets({'b','c'})     = subset({'b'}) + subset({'c'}) + {'b','c'}
subsets({'a','c'})     = subset({'a'}) + subset({'c'}) + {'a','c'}
subsets({'a','b'})     = subset({'a'}) + subset({'b'}) + {'a','b'}
subsets({'a','b','c'}) = subsets({'b','c'}) + subsets({'a','c'}) + subsets({'a','b'}) + {'a','b','c'}
</code></p>

<h3 id="coding">Coding</h3>
<p>```java
    public static Set&lt;Set<string>&gt; subsets(Set<string> set) {</string></string></p>

<pre><code>    if (set.size() == 1) {
        Set&lt;Set&lt;String&gt;&gt; ret = new HashSet&lt;&gt;();
        ret.add(new HashSet&lt;&gt;());
        ret.add(new HashSet&lt;&gt;(set));
        return ret;
    }

    Set&lt;Set&lt;String&gt;&gt; ret = new HashSet&lt;&gt;();
    ret.add(set);

    for (String e : set) {

        Set&lt;String&gt; newSet = new HashSet&lt;&gt;(set);
        newSet.remove(e);
        Set&lt;Set&lt;String&gt;&gt; subsets = subsets(newSet);
        ret.addAll(subsets);

    }
    return ret;

} ```
</code></pre>

<p>```
    public static void main(String[] args) {
        Set<string> set  = new HashSet&lt;&gt;(Arrays.asList("a", "b", "c", "d"));</string></p>

<pre><code>    Set&lt;Set&lt;String&gt;&gt; subs = subsets(set);
    System.out.println("size: " + subs.size());
    for(Set&lt;String&gt; sub : subs) {
        System.out.println(sub.toString());
    }
} ```
</code></pre>

<p><code>
size: 16
[]
[a]
[b]
[c]
[a, b]
[d]
[a, c]
[b, c]
[a, d]
[b, d]
[a, b, c]
[c, d]
[a, b, d]
[a, c, d]
[b, c, d]
[a, b, c, d]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle - Write a Method to Reverse a String Using Recursion]]></title>
    <link href="http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion/"/>
    <updated>2015-08-09T20:25:16+02:00</updated>
    <id>http://ssledz.github.io/blog/2015/08/09/puzzle-write-a-method-to-reverse-a-string-using-recursion</id>
    <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>I bet that everyone who is reading this know how to write a method to revers the string, but does everyone know how to do it using recursion ? To face such puzzle it it always a good idea to write first some results for given arguments and try to find a pattern. There always must be a ‘base case’ which can’t be divided into subproblems. We also need to discover a procedure which solves bigger problem using its smaller subproblems.</p>

<p>So let’s say we need to write a method <code>public static String revers(String arg)</code> which for a given argument returns a reversed string. Below I have written some examples.
<code>
revers('a')     = 'a'
revers('ab')    = 'ba'
revers('abc')   = 'cba'
revers('abcd')  = 'dcba'
revers('abcde') = 'edcba'
</code> 
Based on that we can already write a recursive procedure.
<code>
revers('a')     = 'a'
revers('ab')    = 'b'|revers('a')
revers('abc')   = 'c'|revers('ab') 
revers('abcd')  = 'd'|revers('abc')
revers('abcde') = 'e'|revers('abcd')
</code>
To compute a reversed string for <code>'a'</code> we need to return that string and it is our ‘base case’. In other cases to compute a reversed string we need to get the last char and concatenate it with the reversed string without that last character.</p>

<p>I think we are ready to write some code.</p>

<h3 id="coding">Coding</h3>

<p>```java
    public static String revers(String arg) {</p>

<pre><code>    if (arg.length() == 1) {
        return arg;
    }
    return arg.charAt(arg.length() - 1) + revers(arg.substring(0, arg.length() - 1));

} ```
</code></pre>

<p><code>java
    public static void main(String[] args) {
        System.out.println(revers("a"));
        System.out.println(revers("ab"));
        System.out.println(revers("abc"));
        System.out.println(revers("abcd"));
        System.out.println(revers("abcde"));
    }
</code></p>

<p>```
a
ba
cba
dcba
edcba</p>

<p>```</p>

]]></content>
  </entry>
  
</feed>
